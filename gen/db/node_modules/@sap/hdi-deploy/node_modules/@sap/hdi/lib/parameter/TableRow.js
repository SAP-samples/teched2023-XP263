'use strict';

const assert = require('assert');
/**
 * Representation of a table row. Used as a base for all other parameters.
 * @abstract
 */
class TableRow {
  /**
   * Creates an instance of TableRow.
   * @param {Array<*>} entries An Array, where each field represents a field of a table row.
   * @memberof TableRow
   */
  constructor(entries) {
    /**
     * An Array, where each field represents a field of a table row.
     * @type Array
     */
    assert(entries instanceof Array);
    this.entries = entries;
  }

  /**
   * This method just exists to provide the same "feel" as the Java API.
   * @returns {number} The length of the entries array.
   */
  size() {
    return this.entries.length;
  }

  /**
   * This method just exists to provide the same "feel" as the Java API.
   * The entries property can be accessed directly.
   * @param {number} idx Index of the element to return.
   * @returns {*} The entry at the specified index.
   */
  get(idx) {
    return this.entries[idx];
  }

  /**
   * Returns the field list, this will be inserted into a sql insert statement to fill the correct fields of a helper table.
   * Classes inheriting from TableRow need to implement this method.
   * @returns {undefined} Returns nothing/undefined.
   * @throws Throws an error, since this method is supposed to be abstract.
   * @abstract
   */
  getFieldList() {
    throw new Error('You have to override this method first!');
  }

  /**
   * Returns the placeholder list, this will be inserted into a sql insert statement to fill the correct fields of a helper table.
   * Classes inheriting from TableRow need to implement this method.
   * @returns {undefined} Returns nothing/undefined.
   * @throws Throws an error, since this method is supposed to be abstract.
   * @abstract
   */
  getPlaceholderList() {
    throw new Error('You have to override this method first!');
  }

  /**
   * This method is called to turn the parameters into the correct format for a procedure call.
   * @returns {Array[]} An array of arrays with a single "inner" array compromised of the entries of the object.
   */
  flatten() {
    return [this.entries];
  }
}

module.exports = TableRow;