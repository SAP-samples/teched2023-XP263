'use strict';
const ContainerGroupBase = require('./ContainerGroupBase');
const CONSTANTS = require('../util/Constants');
const typeCheck = require('../util/typeCheck');
const async = require('async');
const APIPrivilege = require('../parameter/APIPrivilege');
const Parameter = require('../parameter/Parameter');
const series_callback = require('../util/callback.js');
const wrap = require('../util/wrap.js');


/**
 * Provides access to the API of a given HDI container group
 * Minimum required HANA server version: 2.00.000
 * @extends ContainerGroupBase
 */
class ContainerGroup extends ContainerGroupBase {
  /**
   * Constructs an access object for a given container group without opening a database connection
   * @constructor
   * @param {string} containerGroupName the name of the container group
   * @param {Object} credentials an object containing the necessary information to connect to a HANA database
   * @param {string} credentials.host hostname for the connection
   * @param {number} credentials.port port for the connection
   * @param {string} credentials.user username for the connection
   * @param {string} credentials.password password of the user
   * @param {string[]} credentials.ca Certificates to use for the connection. Optional.
   * @param {string} paramSchema a schema that will be used to create temp tables to supply arguments to procedure calls
   * @param {boolean} usehdb usehdb flag to use hdb or hana-client while connecting to database
   */
  constructor(containerGroupName, credentials, paramSchema, usehdb) {
    const apiSchema = `_SYS_DI#${containerGroupName}`;
    super(credentials, paramSchema, apiSchema, usehdb);
  }

  /**
   * Grants the given privileges on the container's API objects to the given users.
   * Requires EXECUTE privilege on GRANT_CONTAINER_GROUP_API_PRIVILEGES
   * @param {APIPrivilege[]} privileges list of quadruples (privilege, object, schema, principal) describing what and to whom to grant
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @param {ResultTupleCB} [cb] - The callback handling the result. If not supplied, a function taking a callback as the first parameter will be returned.
   * @returns {Function | undefined} If no callback was supplied, returns a function taking a callback as the first parameter. Otherwise returns undefined.
   * @async
   */
  grantContainerGroupApiPrivileges(privileges, params, cb) {
    /**
     * Function wrapped for async
     * @param {Function} callback Callback Function
     * @returns {undefined}
     */
    const fn = (callback) => {
      try {
        typeCheck(privileges, 'privileges', APIPrivilege);
        typeCheck(params, 'params', Parameter);
      } catch (error) {
        return callback(error);
      }
      const command = 'GRANT_CONTAINER_GROUP_API_PRIVILEGES';
      const sql = `call ${this.apiSchema}.${command}(${this.paramSchema}.${CONSTANTS.API_PRIVILEGES_TABLE}, ${this.paramSchema}.${CONSTANTS.PARAMETERS_TABLE}, ?, ?, ?)`;
      async.series([
        this.fillHelperTable(CONSTANTS.API_PRIVILEGES_TABLE, privileges),
        this.fillHelperTable(CONSTANTS.PARAMETERS_TABLE, params),
        this.executeCall(sql)
      ], series_callback(callback));
    };
    if (cb){
      return fn(cb);
    } else {
      return wrap(fn);
    }
  }

  /**
   * Grants the given privileges on the container's API objects to the given users with grant option.
   * Requires EXECUTE privilege on GRANT_CONTAINER_GROUP_API_PRIVILEGES_WITH_GRANT_OPTION
   * @param {APIPrivilege[]} privileges list of APIPrivilege describing what and to whom to grant
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @param {ResultTupleCB} [cb] - The callback handling the result. If not supplied, a function taking a callback as the first parameter will be returned.
   * @returns {Function | undefined} If no callback was supplied, returns a function taking a callback as the first parameter. Otherwise returns undefined.
   * @async
   */
  grantContainerGroupApiPrivilegesWithGrantOption(privileges, params, cb) {
    /**
     * Function wrapped for async
     * @param {Function} callback Callback Function
     * @returns {undefined}
     */
    const fn = (callback) => {
      try {
        typeCheck(privileges, 'privileges', APIPrivilege);
        typeCheck(params, 'params', Parameter);
      } catch (error) {
        return callback(error);
      }
      const command = 'GRANT_CONTAINER_GROUP_API_PRIVILEGES_WITH_GRANT_OPTION';
      const sql = `call ${this.apiSchema}.${command}(${this.paramSchema}.${CONSTANTS.API_PRIVILEGES_TABLE}, ${this.paramSchema}.${CONSTANTS.PARAMETERS_TABLE}, ?, ?, ?)`;
      async.series([
        this.fillHelperTable(CONSTANTS.API_PRIVILEGES_TABLE, privileges),
        this.fillHelperTable(CONSTANTS.PARAMETERS_TABLE, params),
        this.executeCall(sql)
      ], series_callback(callback));
    };
    if (cb){
      return fn(cb);
    } else {
      return wrap(fn);
    }
  }

  /**
   * Revokes the given privileges on the container's API objects from the given users.
   * Requires EXECUTE privilege on REVOKE_CONTAINER_GROUP_API_PRIVILEGES
   * @param {APIPrivilege[]} privileges list of APIPrivilege
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @param {ResultTupleCB} [cb] - The callback handling the result. If not supplied, a function taking a callback as the first parameter will be returned.
   * @returns {Function | undefined} If no callback was supplied, returns a function taking a callback as the first parameter. Otherwise returns undefined.
   * @async
   */
  revokeContainerGroupApiPrivileges(privileges, params, cb) {
    /**
     * Function wrapped for async
     * @param {Function} callback Callback Function
     * @returns {undefined}
     */
    const fn = (callback) => {
      try {
        typeCheck(privileges, 'privileges', APIPrivilege);
        typeCheck(params, 'params', Parameter);
      } catch (error) {
        return callback(error);
      }
      const command = 'REVOKE_CONTAINER_GROUP_API_PRIVILEGES';
      const sql = `call ${this.apiSchema}.${command}(${this.paramSchema}.${CONSTANTS.API_PRIVILEGES_TABLE}, ${this.paramSchema}.${CONSTANTS.PARAMETERS_TABLE}, ?, ?, ?)`;
      async.series([
        this.fillHelperTable(CONSTANTS.API_PRIVILEGES_TABLE, privileges),
        this.fillHelperTable(CONSTANTS.PARAMETERS_TABLE, params),
        this.executeCall(sql)
      ], series_callback(callback));
    };
    if (cb){
      return fn(cb);
    } else {
      return wrap(fn);
    }
  }
}
module.exports = ContainerGroup;
