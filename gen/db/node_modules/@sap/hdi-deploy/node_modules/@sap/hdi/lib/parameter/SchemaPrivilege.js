'use strict';

const TableRow = require('./TableRow.js');
const parameterCheck = require('./parameterCheck.js');

/**
 * Representation of a to be granted or revoked (container) schema privilege and the grantee
 * Corresponds to a row in a TT_SCHEMA_PRIVILEGES table
 * @extends TableRow
 */
class SchemaPrivilege extends TableRow {
  /**
   * @param {string} privilegeName The name of the privilege to grant.
   * @param {string} principalSchemaName If the principalName is a schema-local role, this specifies the schema.
   * @param {string} principalName Name of the grantee (either a user or role).
   */
  constructor(privilegeName, principalSchemaName, principalName) {
    if (principalSchemaName === null) {
      principalSchemaName = '';
    }
    [privilegeName, principalSchemaName, principalName].forEach((v) => parameterCheck.isString(v));
    super([privilegeName, principalSchemaName, principalName]);
  }

  /**
   * Returns the field list, this will be inserted into a sql insert statement to fill the correct fields of a helper table.
   * @example let sql = `insert into ${schema}.${table} (${this.getFieldList()}) values (${this.getPlaceholderList()})`;
   * @returns {string} Names of the fields in the table in the form of a single string separated by commas.
   */
  getFieldList() {
    return 'PRIVILEGE_NAME, PRINCIPAL_SCHEMA_NAME, PRINCIPAL_NAME';
  }

  /**
   * Returns the placeholder list, this will be inserted into a sql insert statement to fill the correct fields of a helper table.
   * @example let sql = `insert into ${schema}.${table} (${this.getFieldList()}) values (${this.getPlaceholderList()})`;
   * @returns {string} Placeholder to insert into a sql statement, a single ? for each field.
   */
  getPlaceholderList() {
    return '?, ?, ?';
  }
}

module.exports = SchemaPrivilege;