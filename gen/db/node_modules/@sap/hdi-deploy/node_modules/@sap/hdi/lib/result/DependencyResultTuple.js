'use strict';

const ResultTuple = require('../ResultTuple');


/**
 * Corresponds to a TT_DEPENDENCIES row
 */
class DependencyResult {
  /**
   * Constructs a JavaScript object representing a table row.
   * @param {*} resultSet The result of a sql procedure call.
   */
  constructor(resultSet) {
    this.objectDomain = resultSet.OBJECT_DOMAIN;
    this.objectUri = resultSet.OBJECT_URI;
    this.dependencyDomain = resultSet.DEPENDENCY_DOMAIN;
    this.dependencyUri = resultSet.DEPENDENCY_NAME;
    this.dependencyType = resultSet.DEPENDENCY_TYPE;
    this.dependencyLocation = resultSet.DEPENDENCY_LOCATION;
    this.dependencyLocationPath = resultSet.DEPENDENCY_LOCATION_PATH;
  }

  /* eslint-disable complexity */
  /**
   * Return a string representation of this instance.
   * @returns {string} Properties of this object as a string.
   */
  toString() {
    let string = [];

    if (this.objectDomain !== '') {
      string += this.objectDomain;
      string += '://';
    }

    string += this.objectUri;
    string += ' -> ';

    if (this.dependencyDomain !== '') {
      string += this.dependencyDomain;
      string += '://';
    }

    string += this.dependencyUri;

    if (this.dependencyType !== '') {
      string += ' (';
      string += this.dependencyType;
      string += ')';
    }

    if (this.dependencyLocation !== '0:0' || (this.dependencyLocationPath !== null && this.dependencyLocationPath !== '')) {
      string += ' at';
      if (this.dependencyLocation !== '0:0') {
        string += ' ';
        string += this.dependencyLocation;
      }
      if ((this.dependencyLocationPath !== null && this.dependencyLocationPath !== '')) {
        string += ' ';
        string += this.dependencyLocationPath;
      }
    }

    string += '\n';

    return string;
  }
}
/* eslint-enable complexity */



/**
 * An object of this class contains the usual ResultTuple attributes like return code, request ID and messages.
 * The results property is an array of {@link DependencyResult}s.
 * @extends ResultTuple
 */
class DependencyResultTuple extends ResultTuple {
  /**
   * Creates an instance of DependencyResultTuple.
   * @memberof DependencyResultTuple
   */
  constructor() {
    super();
  }

  /**
   * Fills the result property of the object with the supplied result set.
   * @param {Object[]} resultSet The result set of a procedure call.
   * @returns {undefined} Returns nothing/undefined.
   * @throws Throws an error, if the result set is not an array.
   */
  fillResultFromResultSet(resultSet) {
    if (resultSet instanceof Array) {
      resultSet.forEach((res) => {
        this.results.push(new DependencyResult(res));
      });
    } else {
      throw new Error('Result set should be an array.');
    }
  }
}

module.exports = DependencyResultTuple;