'use strict';

const TableRow = require('./TableRow.js');
const parameterCheck = require('./parameterCheck.js');

/**
 * Corresponds to a row in a TT_FILESFOLDERS_CONTENT table
 * @extends TableRow
 * @abstract
 */
class PathWithContent extends TableRow {
  /**
   * @param {string} path Path to a file or folder.
   * @param {ReadStream | Buffer} content Content of a folder or file.
   */
  constructor(path, content) {
    parameterCheck.isString(path);
    parameterCheck.isContent(content);
    super([path, content]);
  }

  /**
   * Returns the field list, this will be inserted into a sql insert statement to fill the correct fields of a helper table.
   * @example let sql = `insert into ${schema}.${table} (${this.getFieldList()}) values (${this.getPlaceholderList()})`;
   * @returns {string} Names of the fields in the table in the form of a single string separated by commas.
   */
  getFieldList() {
    return 'PATH, CONTENT';
  }

  /**
   * Returns the placeholder list, this will be inserted into a sql insert statement to fill the correct fields of a helper table.
   * @example let sql = `insert into ${schema}.${table} (${this.getFieldList()}) values (${this.getPlaceholderList()})`;
   * @returns {string} Placeholder to insert into a sql statement, a single ? for each field.
   */
  getPlaceholderList() {
    return '?, ?';
  }
}

module.exports = PathWithContent;