'use strict';
const HDI = require('../HDI');
const util = require('util');
/**
 * Provides access to the _SYS_DI API
 * Minimum required HANA server version: 1.00.120
 */
class HDIPromises {
  /**
   * Constructs an access object for a given container and opens a connection to the database
   * Requires SELECT privilege on _SYS_DI.TT_*
   * @constructor
   * @param {Object} credentials an object containing the necessary information to connect to a HANA database
   * @param {string} credentials.host hostname for the connection
   * @param {number} credentials.port port for the connection
   * @param {string} credentials.user username for the connection
   * @param {string} credentials.password password of the user
   * @param {string[]} credentials.ca Certificates to use for the connection. Optional.
   * @param {string} paramSchema a schema that will be used to create temp tables to supply arguments to procedure calls
   * @param {boolean} usehdb usehdb flag to use hdb or hana-client while connecting to database
   */
  constructor(credentials, paramSchema, usehdb) {
    this._hdi = new HDI(credentials, paramSchema, usehdb);
  }

  /**
   * Connect to the HANA DB with the credentials passed to the constructor.
   * Requires SELECT privilege on _SYS_DI.TT_*
   * @returns {Promise} String
   * @async
   */
  connect(){
    return util.promisify(this._hdi.connect).bind(this._hdi)();
  }
  
  /**
   * Disconnect from the HANA DB
   * @returns {Promise} String
   */
  disconnect(){
    return new Promise((resolve, reject) => {
      try {
        let msg = this._hdi.disconnect();
        resolve(msg);
      } catch (error) {
        reject(error);
      }
    });
  }

  /**
   * Configures HDI with the given configuration parameters and the given parameters.
   * Requires EXECUTE privilege on CONFIGURE_DI_PARAMETERS
   * @param {Parameter[]} configParams configuration parameters
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  configureDIParameters(configParams, params) {
    return util.promisify(this._hdi.configureDIParameters).bind(this._hdi)(configParams, params);
  }

  /**
   * List all available plugin libraries that can be installed into a container.
   * Requires EXECUTE privilege on LIST_LIBRARIES
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  listLibraries(params) {
    return util.promisify(this._hdi.listLibraries).bind(this._hdi)(params);
  }

  /**
   * Creates a container group with the given name.
   * Requires EXECUTE privilege on CREATE_CONTAINER_GROUP
   * Minimum required HANA server version: 2.00.000
   * @param {string} name the container group name
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  createContainerGroup(name, params) {
    return util.promisify(this._hdi.createContainerGroup).bind(this._hdi)(name, params);
  }

  /**
   * Creates a container group with the given name.
   * Requires EXECUTE privilege on CREATE_CONTAINER_GROUP
   * Minimum required HANA server version: 2.00.000
   * @param {string} name the container group name
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
   createContainer(name, params) {
    return util.promisify(this._hdi.createContainer).bind(this._hdi)(name, params);
  }

  /**
   * Drops the container group with the given name
   * Requires EXECUTE privilege on DROP_CONTAINER_GROUP
   * Minimum required HANA server version: 2.00.000
   * @param {string} containerGroup the container group name
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  dropContainerGroup(containerGroup, params) {
    return util.promisify(this._hdi.dropContainerGroup).bind(this._hdi)(containerGroup, params);
  }

  /**
   * Moves a container from one group to another.
   * Requires EXECUTE privilege on MOVE_CONTAINER_TO_GROUP
   * Minimum required HANA server version: 2.00.000
   * @param {string} container the name of the container to be moved
   * @param {string} containerGroup the name of the target group
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  moveContainerToGroup(container, containerGroup, params) {
    return util.promisify(this._hdi.moveContainerToGroup).bind(this._hdi)(container, containerGroup, params);
  }

  /**
   * Grants the given privileges on the container groups' API objects to the given users.
   * Requires EXECUTE privilege on GRANT_CONTAINER_GROUP_API_PRIVILEGES
   * Minimum required HANA server version: 2.00.000
   * @param {string} containerGroup the name of the container group
   * @param {APIPrivilege[]} privileges list of APIPrivilege describing what and to whom to grant
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  grantContainerGroupApiPrivileges(containerGroup, privileges, params) {
    return util.promisify(this._hdi.grantContainerGroupApiPrivileges).bind(this._hdi)(containerGroup, privileges, params);
  }

  /**
   * Grants the given privileges on the container group's API objects to the given users with grant option.
   * Requires EXECUTE privilege on GRANT_CONTAINER_GROUP_API_PRIVILEGES_WITH_GRANT_OPTION
   * Minimum required HANA server version: 2.00.000
   * @param {string} containerGroup the name of the container group
   * @param {APIPrivilege[]} privileges list of APIPrivilege describing what and to whom to grant
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  grantContainerGroupApiPrivilegesWithGrantOption(containerGroup, privileges, params) {
    return util.promisify(this._hdi.grantContainerGroupApiPrivilegesWithGrantOption).bind(this._hdi)(containerGroup, privileges, params);
  }

  /**
   * Revokes the given privileges on the container group's API objects from the given users.
   * Requires EXECUTE privilege on REVOKE_CONTAINER_GROUP_API_PRIVILEGES
   * Minimum required HANA server version: 2.00.000
   * @param {string} containerGroup the name of the container group
   * @param {APIPrivilege[]} privileges list of APIPrivilege
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  revokeContainerGroupApiPrivileges(containerGroup, privileges, params) {
    return util.promisify(this._hdi.revokeContainerGroupApiPrivileges).bind(this._hdi)(containerGroup, privileges, params);
  }

  /**
   * Grants the given privilege on the _SYS_DI schema to the given principal (user or role); for support use cases only.
   * Requires EXECUTE privilege on GRANT_DI_SUPPORT_PRIVILEGE
   * @param {string} principalSchema schema of the target user/role (empty for global principals)
   * @param {string} principalName name of the target user/role
   * @returns {Promise} array of APIPrivilege
   * @async
   */
    grantDISupportPrivilege(privilege, principal, params) {
      return util.promisify(this._hdi.grantDISupportPrivilege).bind(this._hdi)(privilege, principal, params);
    }
  
    /**
     * Revokes the given privilege on the _SYS_DI schema from the given principal (user or role); for support use cases only.
     * Requires EXECUTE privilege on REVOKE_DI_SUPPORT_PRIVILEGE
     * @param {string} principalSchema schema of the target user/role (empty for global principals)
     * @param {string} principalName name of the target user/role
     * @returns {Promise} array of APIPrivilege
     * @async
     */
     revokeDISupportPrivilege(privilege, principal, params) {
        return util.promisify(this._hdi.revokeDISupportPrivilege).bind(this._hdi)(privilege, principal, params);
      }

  /**
   * Returns the default privileges required for general HDI administration
   * Requires SELECT privilege on _SYS_DI.T_DEFAULT_DI_ADMIN_PRIVILEGES
   * Minimum required HANA server version: 2.00.010
   * @param {string} principalSchema schema of the target user/role (empty for global principals)
   * @param {string} principalName name of the target user/role
   * @returns {Promise} array of APIPrivilege
   * @async
   */
  getDefaultDIAdminPrivileges(principalSchema, principalName) {
    return util.promisify(this._hdi.getDefaultDIAdminPrivileges).bind(this._hdi)(principalSchema, principalName);
  }
  /**
   * Returns the default privileges required for administration of a container group
   * Requires SELECT privilege on _SYS_DI.T_DEFAULT_CONTAINER_GROUP_ADMIN_PRIVILEGES
   * Minimum required HANA server version: 2.00.010
   * @param {string} principalSchema schema of the target user/role (empty for global principals)
   * @param {string} principalName name of the target user/role
   * @returns {Promise} array of APIPrivilege
   * @async
   */
   getDefaultContainerGroupAdminPrivileges(principalSchema, principalName) {
    return util.promisify(this._hdi.getDefaultContainerGroupAdminPrivileges).bind(this._hdi)(principalSchema, principalName);
  }
}
module.exports = HDIPromises;
