'use strict';

const TableRow = require('./TableRow');
const parameterCheck = require('./parameterCheck.js');

/**
 * A simple key-value parameter used for filling the helper table TT_PARAMETERS.
 * @extends TableRow
 */
class Parameter extends TableRow {
  /**
   * @param {string} key Key of the KV-pair.
   * @param {*} value Value of the KV-pair. Can be an array of values.
   */
  constructor(key, value) {
    parameterCheck.isString(key);
    parameterCheck.isNumberOrStringOrArray(value);
    super([key, value]);
    this.key = key;
    this.value = value;
  }

  /**
   * Returns the field list, this will be inserted into a sql insert statement to fill the correct fields of a helper table.
   * @example let sql = `insert into ${schema}.${table} (${this.getFieldList()}) values (${this.getPlaceholderList()})`;
   * @returns {string} Names of the fields in the table in the form of a single string separated by commas.
   */
  getFieldList() {
    return 'KEY, VALUE';
  }

  /**
   * Returns the placeholder list, this will be inserted into a sql insert statement to fill the correct fields of a helper table.
   * @example let sql = `insert into ${schema}.${table} (${this.getFieldList()}) values (${this.getPlaceholderList()})`;
   * @returns {string} Placeholder to insert into a sql statement, a single ? for each field.
   */
  getPlaceholderList() {
    return '?, ?';
  }

  /**
   * If the value is an array, constructs for each of the values a new key-value pair.
   * In the end each element in the array is a simple kv-pair.
   * This method is called to turn the parameters into the correct format for a procedure call.
   * @return {Array[]} An array of arrays, each subarray is an array of length 2, the first field contains the key, the second contains one of the values of the input-array.
   */
  flatten() {
    /**
     * @param {string} key The key to use.
     * @param {value[]} array Array of values that we want to "extract".
     * @return {Array[]}  An array of arrays, each subarray is an array of length 2, the first field contains the key, the second contains one of the values of the input-array.
     */
    function unpack(key, array) {
      const newArray = [];
      array.forEach((value) => {
        newArray.push([key, value]);
      });
      return newArray;
    }

    let flatParams = [];

    if (Array.isArray(this.value)) {
      flatParams = flatParams.concat(unpack(this.key, this.value));
    } else {
      flatParams.push([this.key, this.value]);
    }

    return flatParams;
  }
}

module.exports = Parameter;