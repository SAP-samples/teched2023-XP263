'use strict';
const ContainerGroupBase = require('./ContainerGroupBase');
const CONSTANTS = require('../util/Constants');
const LibraryInformationResultTuple = require('../result/LibraryInformationResultTuple');

const APIPrivilege = require('../parameter/APIPrivilege');
const Parameter = require('../parameter/Parameter');

const async = require('async');
const series_callback = require('../util/callback.js');
const wrap = require('../util/wrap.js');

const typeCheck = require('../util/typeCheck');
/**
 * Provides access to the _SYS_DI API
 * Minimum required HANA server version: 1.00.120
 * @extends ContainerGroupBase
 */
class HDI extends ContainerGroupBase {
  /**
   * Constructs an access object for a given container and opens a connection to the database
   * Requires SELECT privilege on _SYS_DI.TT_*
   * @constructor
   * @param {Object} credentials an object containing the necessary information to connect to a HANA database
   * @param {string} credentials.host hostname for the connection
   * @param {number} credentials.port port for the connection
   * @param {string} credentials.user username for the connection
   * @param {string} credentials.password password of the user
   * @param {string[]} credentials.ca Certificates to use for the connection. Optional.
   * @param {string} paramSchema a schema that will be used to create temp tables to supply arguments to procedure calls
   * @param {boolean} usehdb usehdb flag to use hdb or hana-client while connecting to database
   */
  constructor(credentials, paramSchema, usehdb) {
    super(credentials, paramSchema, CONSTANTS.SYS_DI_SCHEMA, usehdb);
  }

  /**
   * Configures HDI with the given configuration parameters and the given parameters.
   * Requires EXECUTE privilege on CONFIGURE_DI_PARAMETERS
   * @param {Parameter[]} configParams configuration parameters
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @param {ResultTupleCB} [cb] - The callback handling the result. If not supplied, a function taking a callback as the first parameter will be returned.
   * @returns {Function | undefined} If no callback was supplied, returns a function taking a callback as the first parameter. Otherwise returns undefined.
   * @async
   */
  configureDIParameters(configParams, params, cb) {
    /**
     * Function wrapped for async
     * @param {Function} callback Callback Function
     * @returns {undefined}
     */
    const fn = (callback) => {
      try {
        typeCheck(configParams, 'configParams', Parameter);
        typeCheck(params, 'params', Parameter);
      } catch (error) {
        return callback(error);
      }
      const command = 'CONFIGURE_DI_PARAMETERS';
      const sql = `call ${this.apiSchema}.${command}(${this.paramSchema}.${CONSTANTS.CONFIG_PARAMETERS_TABLE}, ${this.paramSchema}.${CONSTANTS.PARAMETERS_TABLE}, ?, ?, ?)`;
      const selectAll = `select * from ${this.paramSchema}.${CONSTANTS.CONFIG_PARAMETERS_TABLE}`;

      async.series([
        this.fillHelperTable(CONSTANTS.CONFIG_PARAMETERS_TABLE, configParams),
        this._execute(selectAll),
        this.executeCall(sql)
      ], series_callback(callback));
    };
    if (cb){
      return fn(cb);
    } else {
      return wrap(fn);
    }
  }

  /**
   * List all available plugin libraries that can be installed into a container.
   * Requires EXECUTE privilege on LIST_LIBRARIES
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @param {ResultTupleCB} [cb] - The callback handling the result. If not supplied, a function taking a callback as the first parameter will be returned.
   * @returns {Function | undefined} If no callback was supplied, returns a function taking a callback as the first parameter. Otherwise returns undefined.
   * @async
   */
  listLibraries(params, cb) {
    /**
     * Function wrapped for async
     * @param {Function} callback Callback Function
     * @returns {undefined}
     */
    const fn = (callback) => {
      try {
        typeCheck(params, 'params', Parameter);
      } catch (error) {
        return callback(error);
      }
      const command = 'LIST_LIBRARIES';
      const sql = `call ${this.apiSchema}.${command}(${this.paramSchema}.${CONSTANTS.PARAMETERS_TABLE}, ?, ?, ?, ?)`;
      const result = new LibraryInformationResultTuple();
      async.series([
        this.fillHelperTable(CONSTANTS.PARAMETERS_TABLE, params),
        this.executeCall(sql, result)
      ], series_callback(callback));
    };
    if (cb){
      return fn(cb);
    } else {
      return wrap(fn);
    }
  }

  /**
   * Creates a container group with the given name.
   * Requires EXECUTE privilege on CREATE_CONTAINER_GROUP
   * Minimum required HANA server version: 2.00.000
   * @param {string} name the container group name
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @param {ResultTupleCB} [cb] - The callback handling the result. If not supplied, a function taking a callback as the first parameter will be returned.
   * @returns {Function | undefined} If no callback was supplied, returns a function taking a callback as the first parameter. Otherwise returns undefined.
   * @async
   */
  createContainerGroup(name, params, cb) {
    /**
     * Function wrapped for async
     * @param {Function} callback Callback Function
     * @returns {undefined}
     */
    const fn = (callback) => {
      try {
        typeCheck(params, 'params', Parameter);
      } catch (error) {
        return callback(error);
      }
      const command = 'CREATE_CONTAINER_GROUP';
      const sql = `call ${this.apiSchema}.${command}('${name}', ${this.paramSchema}.${CONSTANTS.PARAMETERS_TABLE}, ?, ?, ?)`;
      async.series([
        this.fillHelperTable(CONSTANTS.PARAMETERS_TABLE, params),
        this.executeCall(sql)
      ], series_callback(callback));
    };
    if (cb){
      return fn(cb);
    } else {
      return wrap(fn);
    }
  }

  /**
   * Drops the container group with the given name
   * Requires EXECUTE privilege on DROP_CONTAINER_GROUP
   * Minimum required HANA server version: 2.00.000
   * @param {string} containerGroup the container group name
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @param {ResultTupleCB} [cb] - The callback handling the result. If not supplied, a function taking a callback as the first parameter will be returned.
   * @returns {Function | undefined} If no callback was supplied, returns a function taking a callback as the first parameter. Otherwise returns undefined.
   * @async
   */
  dropContainerGroup(containerGroup, params, cb) {
    /**
     * Function wrapped for async
     * @param {Function} callback Callback Function
     * @returns {undefined}
     */
    const fn = (callback) => {
      try {
        typeCheck(params, 'params', Parameter);
      } catch (error) {
        return callback(error);
      }
      const command = 'DROP_CONTAINER_GROUP';
      const sql = `call ${this.apiSchema}.${command}('${containerGroup}', ${this.paramSchema}.${CONSTANTS.PARAMETERS_TABLE}, ?, ?, ?)`;
      async.series([
        this.fillHelperTable(CONSTANTS.PARAMETERS_TABLE, params),
        this.executeCall(sql)
      ], series_callback(callback));
    };
    if (cb){
      return fn(cb);
    } else {
      return wrap(fn);
    }
  }

  /**
   * Moves a container from one group to another.
   * Requires EXECUTE privilege on MOVE_CONTAINER_TO_GROUP
   * Minimum required HANA server version: 2.00.000
   * @param {string} container the name of the container to be moved
   * @param {string} containerGroup the name of the target group
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @param {ResultTupleCB} [cb] - The callback handling the result. If not supplied, a function taking a callback as the first parameter will be returned.
   * @returns {Function | undefined} If no callback was supplied, returns a function taking a callback as the first parameter. Otherwise returns undefined.
   * @async
   */
  moveContainerToGroup(container, containerGroup, params, cb) {
    /**
     * Function wrapped for async
     * @param {Function} callback Callback Function
     * @returns {undefined}
     */
    const fn = (callback) => {
      try {
        typeCheck(params, 'params', Parameter);
      } catch (error) {
        return callback(error);
      }
      const command = 'MOVE_CONTAINER_TO_GROUP';
      const sql = `call ${this.apiSchema}.${command}('${container}', '${containerGroup}', ${this.paramSchema}.${CONSTANTS.PARAMETERS_TABLE}, ?, ?, ?)`;
      async.series([
        this.fillHelperTable(CONSTANTS.PARAMETERS_TABLE, params),
        this.executeCall(sql)
      ], series_callback(callback));
    };
    if (cb){
      return fn(cb);
    } else {
      return wrap(fn);
    }
  }

  /**
   * Grants the given privileges on the container groups' API objects to the given users.
   * Requires EXECUTE privilege on GRANT_CONTAINER_GROUP_API_PRIVILEGES
   * Minimum required HANA server version: 2.00.000
   * @param {string} containerGroup the name of the container group
   * @param {APIPrivilege[]} privileges list of APIPrivilege describing what and to whom to grant
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @param {ResultTupleCB} [cb] - The callback handling the result. If not supplied, a function taking a callback as the first parameter will be returned.
   * @returns {Function | undefined} If no callback was supplied, returns a function taking a callback as the first parameter. Otherwise returns undefined.
   * @async
   */
  grantContainerGroupApiPrivileges(containerGroup, privileges, params, cb) {
    /**
     * Function wrapped for async
     * @param {Function} callback Callback Function
     * @returns {undefined}
     */
    const fn = (callback) => {
      try {
        typeCheck(privileges, 'privileges', APIPrivilege);
        typeCheck(params, 'params', Parameter);
      } catch (error) {
        return callback(error);
      }
      const command = 'GRANT_CONTAINER_GROUP_API_PRIVILEGES';
      const sql = `call ${this.apiSchema}.${command}('${containerGroup}', ${this.paramSchema}.${CONSTANTS.API_PRIVILEGES_TABLE}, ${this.paramSchema}.${CONSTANTS.PARAMETERS_TABLE}, ?, ?, ?)`;
      async.series([
        this.fillHelperTable(CONSTANTS.API_PRIVILEGES_TABLE, privileges),
        this.fillHelperTable(CONSTANTS.PARAMETERS_TABLE, params),
        this.executeCall(sql)
      ], series_callback(callback));
    };
    if (cb){
      return fn(cb);
    } else {
      return wrap(fn);
    }
  }

  /**
   * Grants the given privileges on the container group's API objects to the given users with grant option.
   * Requires EXECUTE privilege on GRANT_CONTAINER_GROUP_API_PRIVILEGES_WITH_GRANT_OPTION
   * Minimum required HANA server version: 2.00.000
   * @param {string} containerGroup the name of the container group
   * @param {APIPrivilege[]} privileges list of APIPrivilege describing what and to whom to grant
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @param {ResultTupleCB} [cb] - The callback handling the result. If not supplied, a function taking a callback as the first parameter will be returned.
   * @returns {Function | undefined} If no callback was supplied, returns a function taking a callback as the first parameter. Otherwise returns undefined.
   * @async
   */
  grantContainerGroupApiPrivilegesWithGrantOption(containerGroup, privileges, params, cb) {
    /**
     * Function wrapped for async
     * @param {Function} callback Callback Function
     * @returns {undefined}
     */
    const fn = (callback) => {
      try {
        typeCheck(privileges, 'privileges', APIPrivilege);
        typeCheck(params, 'params', Parameter);
      } catch (error) {
        return callback(error);
      }
      const command = 'GRANT_CONTAINER_GROUP_API_PRIVILEGES_WITH_GRANT_OPTION';
      const sql = `call ${this.apiSchema}.${command}('${containerGroup}', ${this.paramSchema}.${CONSTANTS.API_PRIVILEGES_TABLE}, ${this.paramSchema}.${CONSTANTS.PARAMETERS_TABLE}, ?, ?, ?)`;
      async.series([
        this.fillHelperTable(CONSTANTS.API_PRIVILEGES_TABLE, privileges),
        this.fillHelperTable(CONSTANTS.PARAMETERS_TABLE, params),
        this.executeCall(sql)
      ], series_callback(callback));
    };
    if (cb){
      return fn(cb);
    } else {
      return wrap(fn);
    }
  }

  /**
   * Revokes the given privileges on the container group's API objects from the given users.
   * Requires EXECUTE privilege on REVOKE_CONTAINER_GROUP_API_PRIVILEGES
   * Minimum required HANA server version: 2.00.000
   * @param {string} containerGroup the name of the container group
   * @param {APIPrivilege[]} privileges list of APIPrivilege
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @param {ResultTupleCB} [cb] - The callback handling the result. If not supplied, a function taking a callback as the first parameter will be returned.
   * @returns {Function | undefined} If no callback was supplied, returns a function taking a callback as the first parameter. Otherwise returns undefined.
   * @async
   */
  revokeContainerGroupApiPrivileges(containerGroup, privileges, params, cb) {
    /**
     * Function wrapped for async
     * @param {Function} callback Callback Function
     * @returns {undefined}
     */
    const fn = (callback) => {
      try {
        typeCheck(privileges, 'privileges', APIPrivilege);
        typeCheck(params, 'params', Parameter);
      } catch (error) {
        return callback(error);
      }
      const command = 'REVOKE_CONTAINER_GROUP_API_PRIVILEGES';
      const sql = `call ${this.apiSchema}.${command}('${containerGroup}', ${this.paramSchema}.${CONSTANTS.API_PRIVILEGES_TABLE}, ${this.paramSchema}.${CONSTANTS.PARAMETERS_TABLE}, ?, ?, ?)`;
      async.series([
        this.fillHelperTable(CONSTANTS.API_PRIVILEGES_TABLE, privileges),
        this.fillHelperTable(CONSTANTS.PARAMETERS_TABLE, params),
        this.executeCall(sql)
      ], series_callback(callback));
    };
    if (cb){
      return fn(cb);
    } else {
      return wrap(fn);
    }
  }

  /**
   * Grants the given privilege on the _SYS_DI schema to the given principal (user or role); for support use cases only.
   * Requires EXECUTE privilege on GRANT_DI_SUPPORT_PRIVILEGE
   * @param {string} privilege to grant
   * @param {string} principal name of the target user/role
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @param {ResultTupleCB} [cb] - The callback handling the result. If not supplied, a function taking a callback as the first parameter will be returned.
   * @returns {Function | undefined} If no callback was supplied, returns a function taking a callback as the first parameter. Otherwise returns undefined.
   * @async
   */
  grantDISupportPrivilege(privilege, principal, params, cb) {
    /**
     * Function wrapped for async
     * @param {Function} callback Callback Function
     * @returns {undefined}
     */
    const fn = (callback) => {
      try {
        typeCheck(params, 'params', Parameter);
      } catch (error) {
        return callback(error);
      }
      const command = 'GRANT_DI_SUPPORT_PRIVILEGE';
      const sql = `call ${this.apiSchema}.${command}('${privilege}','${principal}', ${this.paramSchema}.${CONSTANTS.PARAMETERS_TABLE}, ?, ?, ?)`;
      async.series([
        this.fillHelperTable(CONSTANTS.PARAMETERS_TABLE, params),
        this.executeCall(sql)
      ], series_callback(callback));
    };
    if (cb){
      return fn(cb);
    } else {
      return wrap(fn);
    }
  }

  /**
   * Revokes the given privilege on the _SYS_DI schema from the given principal (user or role); for support use cases only.
   * Requires EXECUTE privilege on REVOKE_DI_SUPPORT_PRIVILEGE
   * @param {string} privilege to grant
   * @param {string} principal name of the target user/role
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @param {ResultTupleCB} [cb] - The callback handling the result. If not supplied, a function taking a callback as the first parameter will be returned.
   * @returns {Function | undefined} If no callback was supplied, returns a function taking a callback as the first parameter. Otherwise returns undefined.
   * @async
   */
  revokeDISupportPrivilege(privilege, principal, params, cb) {
    /**
     * Function wrapped for async
     * @param {Function} callback Callback Function
     * @returns {undefined}
     */
    const fn = (callback) => {
      try {
        typeCheck(params, 'params', Parameter);
      } catch (error) {
        return callback(error);
      }
      const command = 'REVOKE_DI_SUPPORT_PRIVILEGE';
      const sql = `call ${this.apiSchema}.${command}('${privilege}','${principal}', ${this.paramSchema}.${CONSTANTS.PARAMETERS_TABLE}, ?, ?, ?)`;
      async.series([
        this.fillHelperTable(CONSTANTS.PARAMETERS_TABLE, params),
        this.executeCall(sql)
      ], series_callback(callback));
    };
    if (cb){
      return fn(cb);
    } else {
      return wrap(fn);
    }
  }


  /**
   * Returns the default privileges required for general HDI administration
   * Requires SELECT privilege on _SYS_DI.T_DEFAULT_DI_ADMIN_PRIVILEGES
   * Minimum required HANA server version: 2.00.010
   * @param {string} principalSchema schema of the target user/role (empty for global principals)
   * @param {string} principalName name of the target user/role
   * @param {APIPrivilegesCB} [cb] - The callback handling the result. If not supplied, a function taking a callback as the first parameter will be returned.
   * @returns {Function | undefined} If no callback was supplied, returns a function taking a callback as the first parameter. Otherwise returns undefined.
   * @async
   */
  getDefaultDIAdminPrivileges(principalSchema, principalName, cb) {
    /**
     * Function wrapped for async
     * @param {Function} callback Callback Function
     * @returns {undefined}
     */
    const fn = (callback) => {
      const sql = `select PRIVILEGE_NAME, OBJECT_NAME from ${CONSTANTS.DI_ADMIN_PRIVILEGES_TABLE}`;
      this.getAPIPrivileges(sql, principalSchema, principalName, callback);
    };
    if (cb){
      fn(cb);
    } else {
      return wrap(fn);
    }
  }
}
module.exports = HDI;
