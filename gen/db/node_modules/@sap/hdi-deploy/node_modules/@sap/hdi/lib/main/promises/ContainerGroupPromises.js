'use strict';
const ContainerGroup = require('../ContainerGroup');
const util = require('util');

/**
 * Provides access to the API of a given HDI container group
 * Minimum required HANA server version: 2.00.000
 */
class ContainerGroupPromises {
  /**
   * Constructs an access object for a given container group without opening a database connection
   * @constructor
   * @param {string} containerGroupName the name of the container group
   * @param {Object} credentials an object containing the necessary information to connect to a HANA database
   * @param {string} credentials.host hostname for the connection
   * @param {number} credentials.port port for the connection
   * @param {string} credentials.user username for the connection
   * @param {string} credentials.password password of the user
   * @param {string[]} credentials.ca Certificates to use for the connection. Optional.
   * @param {string} paramSchema a schema that will be used to create temp tables to supply arguments to procedure calls
   * @param {boolean} usehdb usehdb flag to use hdb or hana-client while connecting to database
   */
  constructor(containerGroupName, credentials, paramSchema, usehdb) {
    this._containerGroup = new ContainerGroup(containerGroupName, credentials, paramSchema, usehdb);
  }

  /**
   * Connect to the HANA DB with the credentials passed to the constructor.
   * Requires SELECT privilege on _SYS_DI.TT_*
   * @returns {Promise} String
   * @async
   */
  connect(){
    return util.promisify(this._containerGroup.connect).bind(this._containerGroup)();
  }

  /**
     * Disconnect from the HANA DB
     * @returns {Promise} String
   */
  disconnect(){
    return new Promise((resolve, reject) => {
      try {
        let msg = this._containerGroup.disconnect();
        resolve(msg);
      } catch (error) {
        reject(error);
      }
    });
  }

  /**
   * Returns the default privileges required for administration of a container
   * Requires SELECT privilege on _SYS_DI.T_DEFAULT_CONTAINER_ADMIN_PRIVILEGES
   * Minimum required HANA server version: 2.00.010
   * @param {string} principalSchema schema of the target user/role (empty for global principals)
   * @param {string} principalName name of the target user/role
   * @returns {Promise} list of APIPrivilege
   * @async
   */
  getDefaultContainerAdminPrivileges(principalSchema, principalName) {
    return util.promisify(this._containerGroup.getDefaultContainerAdminPrivileges).bind(this._containerGroup)(principalSchema, principalName);
  }

  /**
   * Grants the given privileges on the container's API objects to the given users.
   * Requires EXECUTE privilege on GRANT_CONTAINER_GROUP_API_PRIVILEGES
   * @param {APIPrivilege[]} privileges list of quadruples (privilege, object, schema, principal) describing what and to whom to grant
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  grantContainerGroupApiPrivileges(privileges, params) {
    return util.promisify(this._containerGroup.grantContainerGroupApiPrivileges).bind(this._containerGroup)(privileges, params);
  }

  /**
   * Grants the given privileges on the container's API objects to the given users with grant option.
   * Requires EXECUTE privilege on GRANT_CONTAINER_GROUP_API_PRIVILEGES_WITH_GRANT_OPTION
   * @param {APIPrivilege[]} privileges list of APIPrivilege describing what and to whom to grant
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  grantContainerGroupApiPrivilegesWithGrantOption(privileges, params) {
    return util.promisify(this._containerGroup.grantContainerGroupApiPrivilegesWithGrantOption).bind(this._containerGroup)(privileges, params);
  }

  /**
   * Revokes the given privileges on the container's API objects from the given users.
   * Requires EXECUTE privilege on REVOKE_CONTAINER_GROUP_API_PRIVILEGES
   * @param {APIPrivilege[]} privileges list of APIPrivilege
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  revokeContainerGroupApiPrivileges(privileges, params) {
    return util.promisify(this._containerGroup.revokeContainerGroupApiPrivileges).bind(this._containerGroup)(privileges, params);
  }

  /* eslint-enable no-shadow */
  /**
   * Returns the default privileges required for working with a container
   * Requires SELECT privilege on _SYS_DI.T_DEFAULT_CONTAINER_USER_PRIVILEGES
   * Minimum required HANA server version: 2.00.010
   * @param {string} principalSchema schema of the target user/role (empty for global principals)
   * @param {string} principalName name of the target user/role
   * @returns {Promise} list of APIPrivilege
   * @async
   */
  getDefaultContainerUserPrivileges(principalSchema, principalName) {
    return util.promisify(this._containerGroup.getDefaultContainerUserPrivileges).bind(this._containerGroup)(principalSchema, principalName);
  }

  /**
   * Returns the default privileges required for role administration of a container
   * Requires SELECT privilege on _SYS_DI.T_DEFAULT_CONTAINER_ROLE_ADMIN_PRIVILEGES
   * Requires DI.API version greater or equal 15 (OP) or greater or equal 1001 (CE)
   * @param {string} principalSchema schema of the target user/role (empty for global principals)
   * @param {string} principalName name of the target user/role
   * @returns {Promise} list of APIPrivilege
   * @async
   */
  getDefaultContainerRoleAdminPrivileges(principalSchema, principalName) {
    return util.promisify(this._containerGroup.getDefaultContainerRoleAdminPrivileges).bind(this._containerGroup)(principalSchema, principalName);
  }

  /**
   * Returns the default common privileges required for working with HDI
   * Requires SELECT privilege on _SYS_DI.T_DEFAULT_COMMON_PRIVILEGES
   * @param {string} principalSchema schema of the target user/role (empty for global principals)
   * @param {string} principalName name of the target user/role
   * @returns {Promise} list of APIPrivilege
   * @async
   */
  getDefaultCommonPrivileges(principalSchema, principalName) {
    return util.promisify(this._containerGroup.getDefaultCommonPrivileges).bind(this._containerGroup)(principalSchema, principalName);
  }

  /**
   * Configures a container with the given configuration parameters and the given parameters.
   * Requires EXECUTE privilege on CONFIGURE_CONTAINER_PARAMETERS
   * @param {string} container The container name.
   * @param { Parameter[]} configParams parameters to configure the container
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  configureContainerParameters(container, configParams, params) {
    return util.promisify(this._containerGroup.configureContainerParameters).bind(this._containerGroup)(container, configParams, params);
  }

   /**
   * (Re)configures the set of plugin libraries which are installed in the given container.
   * Requires EXECUTE privilege on CONFIGURE_LIBRARIES
   * @param {string} container the affected container
   * @param {LibraryConfiguration[]} libs Configuration for libraries
   * @param {Parameter[]} params parameters controlling the current procedure call. Supported key-value combinations: UNDEPLOY: true, false (default)
   * @returns {Promise} ResultTuple
   * @async
   */
  configureLibraries(container, libs, params) {
    return util.promisify(this._containerGroup.configureLibraries).bind(this._containerGroup)(container, libs, params);
  }

  /**
   * List the set of plugin libraries which are installed in the given container.
   * Requires EXECUTE privilege on LIST_CONFIGURED_LIBRARIES
   * @param {string} container the affected container.
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  listConfiguredLibraries(container, params) {
    return util.promisify(this._containerGroup.listConfiguredLibraries).bind(this._containerGroup)(container, params);
  }

  /**
   * Tries to cancel the asynchronous request with the given request id.
   * Requires EXECUTE privilege on CANCEL
   * @param {string} container the affected container.
   * @param {number} requestId request id of the request to cancel
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  cancel(container, requestId, params) {
    return util.promisify(this._containerGroup.cancel).bind(this._containerGroup)(container, requestId, params);
  }

  /**
   * Grants the given privileges on the container's API objects to the given users.
   * Requires EXECUTE privilege on GRANT_CONTAINER_API_PRIVILEGES
   * @param {string} container the affected container.
   * @param {APIPrivilege[]} privileges list of APIPrivilege describing what and to whom to grant
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  grantContainerApiPrivileges(container, privileges, params) {
    return util.promisify(this._containerGroup.grantContainerApiPrivileges).bind(this._containerGroup)(container, privileges, params);
  }

  /**
   * Grants the given privileges on the container's API objects to the given users with grant option.
   * Requires EXECUTE privilege on GRANT_CONTAINER_API_PRIVILEGES_WITH_GRANT_OPTION
   * @param {string} container the affected container.
   * @param {APIPrivilege[]} privileges list of APIPrivilege describing what and to whom to grant
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  grantContainerApiPrivilegesWithGrantOption(container, privileges, params) {
    return util.promisify(this._containerGroup.grantContainerApiPrivilegesWithGrantOption).bind(this._containerGroup)(container, privileges, params);
  }

  /**
   * Revokes the given privileges on the container's API objects from the given users.
   * Requires EXECUTE privilege on REVOKE_CONTAINER_API_PRIVILEGES
   * @param {string} container the affected container.
   * @param {APIPrivilege[]} privileges list of APIPrivilege
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  revokeContainerApiPrivileges(container, privileges, params) {
    return util.promisify(this._containerGroup.revokeContainerApiPrivileges).bind(this._containerGroup)(container, privileges, params);
  }

  /**
   * Grants the given privileges on the container's target schema to the given users.
   * Requires EXECUTE privilege on GRANT_CONTAINER_SCHEMA_PRIVILEGES
   * @param {string} container the affected container.
   * @param {SchemaPrivilege[]} privileges list of SchemaPrivilege describing what and to whom to grant
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  grantContainerSchemaPrivileges(container, privileges, params) {
    return util.promisify(this._containerGroup.grantContainerSchemaPrivileges).bind(this._containerGroup)(container, privileges, params);
  }

  /**
   * Revokes the given privileges on the container's target schema from the given users.
   * Requires EXECUTE privilege on REVOKE_CONTAINER_SCHEMA_PRIVILEGES
   * @param {string} container the affected container.
   * @param {SchemaPrivilege} privileges list of SchemaPrivilege
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  revokeContainerSchemaPrivileges(container, privileges, params) {
    return util.promisify(this._containerGroup.revokeContainerSchemaPrivileges).bind(this._containerGroup)(container, privileges, params);
  }

  /**
   * Grants the given roles which are deployed inside the container to the given users.
   * Requires EXECUTE privilege on GRANT_CONTAINER_SCHEMA_ROLES
   * @param {string} container the affected container.
   * @param {SchemaRole[]} roles list of SchemaRole
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  grantContainerSchemaRoles(container, roles, params) {
    return util.promisify(this._containerGroup.grantContainerSchemaRoles).bind(this._containerGroup)(container, roles, params);
  }

  /**
   * Revokes the given roles which are deployed inside the container from the given users.
   * Requires EXECUTE privilege on REVOKE_CONTAINER_SCHEMA_ROLES
   * @param {string} container the affected container.
   * @param {SchemaRole[]} roles list of SchemaRole
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  revokeContainerSchemaRoles(container, roles, params) {
    return util.promisify(this._containerGroup.revokeContainerSchemaRoles).bind(this._containerGroup)(container, roles, params);
  }

  /**
   * Grants the given support privilege which are deployed inside the container to the given users.
   * @param {string} container the affected container.
   * @param {string} principal name of the target user/role
   * @param {string} privilege to grant
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
   grantContainerSupportPrivilege(container, privilege, principal, params) {
      return util.promisify(this._containerGroup.grantContainerSupportPrivilege).bind(this._containerGroup)(container, privilege, principal, params);
    }

  /**
   * Enables the specified container user so it can be used for accessing a container for support purposes.
   * Requires EXECUTE privilege on ENABLE_CONTAINER_USER
   * @param {string} containerUser the affected container user.   
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
   enableContainerUser(containerUser, params) {
      return util.promisify(this._containerGroup.enableContainerUser).bind(this._containerGroup)(containerUser, params);
    }
  
  /**
   * Disables the specified container user after it has been enabled by a call to ENABLE_CONTAINER_USER.
   * Requires EXECUTE privilege on DISABLE_CONTAINER_USER   
   * @param {string} containerUser the affected container user.   
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
   disableContainerUser(containerUser, params) {
      return util.promisify(this._containerGroup.disableContainerUser).bind(this._containerGroup)(containerUser, params);
    }

  /**
   * Revokes the given support privilege which are deployed inside the container to the given users.
   * @param {string} container the affected container.
   * @param {string} privilege to grant
   * @param {string} principal name of the target user/role
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
   revokeContainerSupportPrivilege(container, privilege, principal, params) {
    return util.promisify(this._containerGroup.revokeContainerSupportPrivilege).bind(this._containerGroup)(container, privilege, principal, params);
  }

  /**
   * Returns the default privileges required for administration of a container group
   * Requires SELECT privilege on _SYS_DI.T_DEFAULT_CONTAINER_GROUP_ADMIN_PRIVILEGES
   * Minimum required HANA server version: 2.00.010
   * @param {string} principalSchema schema of the target user/role (empty for global principals)
   * @param {string} principalName name of the target user/role
   * @returns {Promise} list of APIPrivilege
   * @async
   */
  getDefaultContainerGroupAdminPrivileges(principalSchema, principalName) {
    return util.promisify(this._containerGroup.getDefaultContainerGroupAdminPrivileges).bind(this._containerGroup)(principalSchema, principalName);
  }

  /**
   * Creates a container with the given name.
   * Requires EXECUTE privilege on CREATE_CONTAINER
   * @param {string} name the container name
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
  createContainer(name, params) {
    return util.promisify(this._containerGroup.createContainer).bind(this._containerGroup)(name, params);
  }

  /**
   * Drops the container with the given name, incl. all corresponding technical users, schemata, tables, etc.
   * Requires EXECUTE privilege on DROP_CONTAINER
   * @param {string} name the container name
   * @param {Parameter[]} params parameters controlling the current procedure call. Supported key-value combinations: IGNORE_WORK: true, false (default), IGNORE_DEPLOYED: true, false (default)
   * @returns {Promise} ResultTuple
   * @async
   */
   dropContainer(name, params) {
    return util.promisify(this._containerGroup.dropContainer).bind(this._containerGroup)(name, params);
  }

  /**
   * Exports container for copy into a specifies table within a specified schema.
   * NOTE: The table must be created before calling this function. Furthermore, the [containerName]#DI user must be granted SELECT and INSERT privileges on the specified table.
   * Requires EXECUTE privilege on EXPORT_CONTAINER_FOR_COPY
   * Minimum required HANA server version: 2.00.010
   * @param {string} containerName container name for the exported files to be placed in
   * @param {string} tableName table name for the exported files to be placed in
   * @param {string} tableSchema schema of the specified table
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
   exportContainerForCopy(containerName, tableName, tableSchema, params) {
    return util.promisify(this._containerGroup.exportContainerForCopy).bind(this._containerGroup)(containerName, tableName, tableSchema, params);
  }

  /**
   * Imports container for copy into a specifies table within a specified schema.
   * NOTE: The table must be created before calling this function. Furthermore, the [containerName]#DI user must be granted SELECT privileges on the specified table.
   * Requires EXECUTE privilege on IMPORT_CONTAINER_FOR_COPY
   * Minimum required HANA server version: 2.00.010
   * @param {string} containerName container name for the exported files to be placed in
   * @param {string} tableName table name for the exported files to be placed in
   * @param {string} tableSchema schema of the specified table
   * @param {Parameter[]} params parameters controlling the current procedure call
   * @returns {Promise} ResultTuple
   * @async
   */
     importContainerForCopy(containerName, tableName, tableSchema, params) {
      return util.promisify(this._containerGroup.importContainerForCopy).bind(this._containerGroup)(containerName, tableName, tableSchema, params);
    }
}
module.exports = ContainerGroupPromises;
