'use strict';

const TableRow = require('./TableRow.js');
const parameterCheck = require('./parameterCheck.js');

/**
 * Parameter used to configure libraries.
 * @extends TableRow
 */
class LibraryConfiguration extends TableRow {
  /**
   * Returns the constant string "ADD".
   * @returns {string} ADD
   * @readonly
   * @static
   * @memberof LibraryConfiguration
   */
  static get ADD() {
    return 'ADD';
  }

  /**
   * Returns the constant string "REMOVE".
   * @returns {string} REMOVE
   * @readonly
   * @static
   * @memberof LibraryConfiguration
   */
  static get REMOVE() {
    return 'REMOVE';
  }

  /**
   * @constructor
   * @param {string} action the action to perform
   * @param {string} library the library to perform the action on
   */
  constructor(action, library) {
    [action, library].forEach((v) => parameterCheck.isString(v));
    super([action, library]);
  }

  /**
   * Returns the field list, this will be inserted into a sql insert statement to fill the correct fields of a helper table.
   * @example let sql = `insert into ${schema}.${table} (${this.getFieldList()}) values (${this.getPlaceholderList()})`;
   * @returns {string} Names of the fields in the table in the form of a single string separated by commas.
   */
  getFieldList() {
    return 'ACTION, LIBRARY_NAME';
  }

  /**
   * Returns the placeholder list, this will be inserted into a sql insert statement to fill the correct fields of a helper table.
   * @example let sql = `insert into ${schema}.${table} (${this.getFieldList()}) values (${this.getPlaceholderList()})`;
   * @returns {string} Placeholder to insert into a sql statement, a single ? for each field.
   */
  getPlaceholderList() {
    return '?, ?';
  }
}

module.exports = LibraryConfiguration;