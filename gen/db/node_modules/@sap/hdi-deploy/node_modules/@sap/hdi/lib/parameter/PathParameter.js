'use strict';

const TableRow = require('./TableRow.js');
const parameterCheck = require('./parameterCheck.js');

/**
 * Representation of key/value parameter assigned to a specific path
 * Corresponds to a row in a TT_FILESFOLDERS_PARAMETERS table
 * @extends TableRow
 */
class PathParameter extends TableRow {
  /**
   * @param {string} path Path to a file or folder.
   * @param {string} key Key of the KV-pair.
   * @param {*} value Value of the KV-pair. (Can be an array of values.) CAN IT? TODO!
   */
  constructor(path, key, value) {
    parameterCheck.isString(path);
    parameterCheck.isString(key);
    parameterCheck.isNumberOrStringOrArray(value);
    super([path, key, value]);
  }

  /**
   * Returns the field list, this will be inserted into a sql insert statement to fill the correct fields of a helper table.
   * @example let sql = `insert into ${schema}.${table} (${this.getFieldList()}) values (${this.getPlaceholderList()})`;
   * @returns {string} Names of the fields in the table in the form of a single string separated by commas.
   */
  getFieldList() {
    return 'PATH, KEY, VALUE';
  }

  /**
   * Returns the placeholder list, this will be inserted into a sql insert statement to fill the correct fields of a helper table.
   * @example let sql = `insert into ${schema}.${table} (${this.getFieldList()}) values (${this.getPlaceholderList()})`;
   * @returns {string} Placeholder to insert into a sql statement, a single ? for each field.
   */
  getPlaceholderList() {
    return '?, ?, ?';
  }
}

module.exports = PathParameter;