'use strict';

/**
 * Checks if variable is an Array.
 *
 * @param {any} variable Var to check.
 * @returns {boolean} True or false.
 */
function isArray(variable){
  return (Object.prototype.toString.call(variable) === '[object Array]' || variable instanceof Array);
}

/**
 * This function is used to check if the parameter(s) passed to an API method are of the correct types.
 * This way, we try to force the user to use the supplied classes to construct the parameters instead of building objects himself.
 * @param {*} variable the variable to check.
 * @param {string} variableName the name of the variable, to allow more useful error messages.
 * @param {Class} expectedType the class/type that the variable needs to have.
 * @returns {undefined} Returns nothing/undefined.
 * @throws Throws an error, if the passed variable is not an array and/or is not of the expected type.
 */

/* eslint-disable complexity */
module.exports = function typeCheck(variable, variableName, expectedType) {
  // variable not null
  if (variable) {
    const varIsArray = isArray(variable);

    // variable not an empty array
    if (!(varIsArray && variable.length === 0)) {
      if (varIsArray && variable[0] instanceof expectedType){
        // Filter out correct cases.
      } else if (varIsArray && !(variable[0] instanceof expectedType)){
        throw new Error(`${variableName  } has the wrong type. Check the documentation for the correct type.`);
      } else if (variable instanceof expectedType){
        throw new Error(`${variableName  } has the right type, but it should be an array. Check the documentation for the correct type.`);
      } else {
        throw new Error(`${variableName  } has the wrong type and it should be an array. Check the documentation for the correct type.`);
      }
    }
  }
};
/* eslint-enable complexity */