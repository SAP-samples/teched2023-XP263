'use strict';

const debug = require('debug');
const debugError = debug('xssec:JwksReplica');
debugError.log = console.error.bind(console);

const requests = require('../requests');
const nodeRSA = require('node-rsa');

class IdentityService {
    #url;
    #zone_uuid;           // optional zone id
    #correlationId; // optional
    #oidcInfo;

    get url() { return this.#url; }
    get zone_uuid() { return this.#zone_uuid; }
    get correlationId() { return this.#correlationId; }

    constructor(url, zone_uuid, correlationId) {
        if (url === undefined) {
            throw new Error("IdentityService requires a url.");
        }

        this.#url = url;
        this.#zone_uuid = zone_uuid;
        this.#correlationId = correlationId;
    }

    async fetchOidcInfo() {
        return new Promise((res, rej) => {
            try {
                requests.requestOpenIDConfiguration(this.url, { correlationId: this.correlationId }, (err, oidcInfo) => {
                    if (err) {
                        rej(err);
                    }

                    res(oidcInfo);
                });
            } catch (e) {
                rej(e);
            }
        });
    }

    async fetchJwks() {
        return new Promise(async (res, rej) => {
            if (!this.#oidcInfo) {
                try {
                    this.#oidcInfo = await this.fetchOidcInfo();
                } catch (e) {
                    rej(e);
                }
            }

            const jwksEndpoint = this.#oidcInfo["jwks_uri"];

            try {
                requests.fetchOIDCKey(jwksEndpoint, this.zone_uuid, { correlationId: this.correlationId }, (err, json) => {
                    if (err) {
                        rej(err);
                    }

                    const jwks = json.keys
                        .map(key => {
                            try {
                                const pem = this.createPem(key);
                                key.value = pem;
                            } catch(e) {
                                debugError(`Could not calculate PEM for key with kid ${key.kid}: ${e}. IdentityService: (${JSON.stringify(this)})`)
                            }

                            return key;
                        })
                        .filter(key => key.value !== undefined);
                    res(jwks);
                });
            } catch (e) {
                rej(e);
            }
        });
    }

    createPem(key) {
        if (key.kty !== "RSA") {
            throw new Error("KTY '" + key.kty + "' not supported");
        }

        const modulus = Buffer.from(key.n, 'base64');
        const exponent = Buffer.from(key.e, 'base64');

        const pubKey = new nodeRSA().importKey({ n: modulus, e: exponent }, 'components-public');
        return pubKey.exportKey('pkcs8-public-pem');
    }

    toJSON() {
        return {
            ...this,
            url: this.url,
            zone_uuid : this.zone_uuid
        }
    }
}

module.exports = IdentityService;