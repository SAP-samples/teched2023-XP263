'use strict';

const JwksReplica = require('./JwksReplica.js');
const XsuaaService = require('../service/XsuaaService.js');
const IdentityService = require('../service/IdentityService.js');

class JwksManager {
    #replicas;

    constructor() {
        this.#replicas = new Map();
    }

    /**
     * Sets the expirationTime of any future JwksReplica objects created by this manager. Does not affect already created (and therefore cached) objects.
     * @param expirationTime in ms
     * @returns this
     */
    withExpirationTime(expirationTime) {
        if (expirationTime > 0) {
            this.expirationTime = expirationTime;
        }

        return this;
    }

    /**
     * Sets the refreshPeriod of any future JwksReplica objects created by this manager. Does not affect already created (and therefore cached) objects.
     * @param refreshPeriod in ms
     * @returns this
     */
    withRefreshPeriod(refreshPeriod) {
        if (refreshPeriod > 0) {
            this.refreshPeriod = refreshPeriod;
        }
        
        return this;
    }

    getXsuaaJwks(jku, zid) {
        if (!jku) {
            throw new Error("Cannot get JWKS from empty JKU.");
        }

        const keyParts = [jku, zid || ""];
        const replicaKey = this.createCacheKey(keyParts);

        if (!this.#replicas.has(replicaKey)) {
            const xsuaaService = new XsuaaService(jku, zid);
            const jwksReplica = new JwksReplica(xsuaaService, this.expirationTime, this.refreshPeriod);

            this.#replicas.set(replicaKey, jwksReplica);
        }

        return this.#replicas.get(replicaKey);
    }

    getIdentityJwks(url, zone_uuid) {
        if (!url) {
            throw new Error("Cannot get JWKS from empty URL.");
        }

        const keyParts = [url, zone_uuid || ""];
        const replicaKey = this.createCacheKey(keyParts);

        if (!this.#replicas.has(replicaKey)) {
            const service = new IdentityService(url, zone_uuid);
            const jwksReplica = new JwksReplica(service, this.expirationTime, this.refreshPeriod);

            this.#replicas.set(replicaKey, jwksReplica);
        }

        return this.#replicas.get(replicaKey);
    }

    createCacheKey(parts) {
        if (!parts || parts.length < 1) {
            throw new Error("Could not create JwksManager key. Key parts must contain at least one element.");
        }

        return parts.map(s => `${s.length}:${s}`).join(":");
    }
}

module.exports = JwksManager;