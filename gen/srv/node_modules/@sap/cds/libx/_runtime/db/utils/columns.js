const cds = require('../../cds')
const resolveStructured = require('../../common/utils/resolveStructured')

const { DRAFT_COLUMNS_MAP } = require('../../common/constants/draft')

/**
 * This method gets all columns for an entity.
 * It includes the generated foreign keys from managed associations, structured elements and complex and custom types.
 * As well, it provides the annotations starting with '@' for each column.
 *
 * @param entity - the csn entity
 * @returns {Array} - array of columns
 */
const getColumns = (entity, { _4db, onlyKeys } = { _4db: true, onlyKeys: false }) => {
  // REVISIT is this correct or just a problem that occurs because of new structure we do not deal with yet?
  if (!(entity && entity.elements)) return []
  const columnNames = []
  // REVISIT!!!
  const { structs = cds.env.features.ucsn_struct_conversion } = cds.env.effective.odata
  const { lean_draft } = cds.env.fiori
  const elements = lean_draft ? entity.elements : Object.getPrototypeOf(entity.elements) || entity.elements
  for (const elementName in elements) {
    const element = elements[elementName]
    if (onlyKeys && !element.key) continue
    if (element.isAssociation) continue
    if (!lean_draft && _4db && entity._isDraftEnabled && elementName in DRAFT_COLUMNS_MAP) continue
    if (structs && element.elements) {
      columnNames.push(...resolveStructured({ element, structProperties: [] }, false))
      continue
    }
    columnNames.push(elementName)
  }
  return columnNames.map(name => elements[name] || { name })
}

/*
 * this module is required by cds-pg. -> in case of incompatible changes, we should let them know.
 */
module.exports = getColumns
