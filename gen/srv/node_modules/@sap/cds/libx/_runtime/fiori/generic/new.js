const cds = require('../../cds')
const { INSERT, UPDATE } = cds.ql

const onDraftActivate = require('./activate')._handler
const { isNavigationToMany } = require('../utils/req')
const { ensureDraftsSuffix } = require('../utils/handler')

const _getUpdateDraftAdminCQN = ({ user, timestamp }, draftUUID) => {
  return UPDATE('DRAFT.DraftAdministrativeData')
    .data({
      InProcessByUser: user.id,
      LastChangedByUser: user.id,
      LastChangeDateTime: timestamp
    })
    .where({ DraftUUID: draftUUID })
}

const _getInsertDraftAdminCQN = ({ user, timestamp }, uuid) => {
  return INSERT.into('DRAFT.DraftAdministrativeData').entries({
    DraftUUID: uuid,
    CreationDateTime: timestamp,
    CreatedByUser: user.id,
    LastChangeDateTime: timestamp,
    LastChangedByUser: user.id,
    DraftIsCreatedByMe: true,
    DraftIsProcessedByMe: true,
    InProcessByUser: user.id
  })
}

const _getInsertDataCQN = (req, draftUUID) => {
  const draftName = ensureDraftsSuffix(req.target.name)

  const insertData = INSERT.into(draftName).entries(req.query.INSERT.entries[0]) // entries is always set because there are no entities without keys

  req.data.IsActiveEntity = false
  req.data.HasDraftEntity = false
  req.data.HasActiveEntity = false
  req.data.DraftAdministrativeData_DraftUUID = draftUUID

  return insertData
}

/**
 * Generic Handler for CREATE requests in the context of draft.
 * In case of success it returns the created entry.
 *
 * @param req
 * @param next
 */
const fioriGenericNew = async function (req, next) {
  if (!req._draftMetadata) {
    // REVISIT: when is this the case?
    return onDraftActivate(req, next)
  }

  if (!cds.db) req.reject('NO_DATABASE_CONNECTION')

  const isRoot = typeof req.query.INSERT.into === 'string' || req.query.INSERT.into.ref?.length === 1
  // Only allowed for pseudo draft roots (entities with this action)
  if (isRoot && !req.target['@Common.DraftRoot.ActivationAction']) req.reject(403, 'DRAFT_MODIFICATION_ONLY_VIA_ROOT')

  const navigationToMany = isNavigationToMany(req)

  const adminDataCQN = navigationToMany
    ? _getUpdateDraftAdminCQN(req, req.data.DraftAdministrativeData_DraftUUID)
    : _getInsertDraftAdminCQN(req, req.data.DraftAdministrativeData_DraftUUID)
  const insertDataCQN = _getInsertDataCQN(req, req.data.DraftAdministrativeData_DraftUUID)

  const dbtx = cds.tx(req)

  await Promise.all([dbtx.run(adminDataCQN), dbtx.run(insertDataCQN)])

  req._.readAfterWrite = true
  return { ...req.data, IsActiveEntity: false }
}

module.exports = cds.service.impl(function (srv, entity) {
  srv.on('NEW', entity, fioriGenericNew)
})
