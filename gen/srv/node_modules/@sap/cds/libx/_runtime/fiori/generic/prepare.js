const cds = require('../../cds')
const { SELECT } = cds.ql

const { isActiveEntityRequested } = require('../utils/where')
const { ensureDraftsSuffix, ensureNoDraftsSuffix } = require('../utils/handler')
const { getColumns } = require('../../cds-services/services/utils/columns')

/**
 * Generic Handler for PreparationAction requests.
 * In case of success it returns the prepared draft entry.
 *
 * @param req
 */
const fioriGenericPrepare = async function (req) {
  if (req.query.SELECT.from.ref.length > 1 || isActiveEntityRequested(req.query.SELECT.from.ref[0].where || [])) {
    req.reject(400, 'Action "draftPrepare" can only be called on a draft entity')
  }

  if (!cds.db) req.reject('NO_DATABASE_CONNECTION')

  const target = ensureDraftsSuffix(req.target.name)
  const columns = getColumns(this.model.definitions[ensureNoDraftsSuffix(req.target.name)], {
    keysOnly: true,
    removeIgnore: true,
    filterVirtual: true,
    onlyNames: true
  })
  columns.push({ ref: ['DRAFT.DraftAdministrativeData', 'inProcessByUser'], as: 'draftAdmin_inProcessByUser' })
  const select = SELECT.one(target)
    .columns(columns)
    .join('DRAFT.DraftAdministrativeData')
    .on([
      { ref: [target, 'DraftAdministrativeData_DraftUUID'] },
      '=',
      { ref: ['DRAFT.DraftAdministrativeData', 'DraftUUID'] }
    ])
    .where(req.query.SELECT.from.ref[0].where)
  const result = await cds.tx(req).run(select)
  if (!result) req.reject(404)
  if (result.draftAdmin_inProcessByUser !== req.user.id) {
    // REVISIT: security log?
    req.reject(403, 'DRAFT_LOCKED_BY_ANOTHER_USER', [result.draftAdmin_inProcessByUser])
  }
  delete result.draftAdmin_inProcessByUser
  return result
}

module.exports = cds.service.impl(function (srv, entity) {
  srv.on('draftPrepare', entity, fioriGenericPrepare)
})
