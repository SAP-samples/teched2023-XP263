const PSEUDO_ROLES = ['system-user', 'internal-user']

class User {

  constructor (_) {
    if (_ === undefined) {
      if (new.target === Privileged) return
      if (new.target === Anonymous) return
      else return new User.default
    }
    if (typeof _ === 'string') { this.id = _; return }
    for (let each in _) super[each === '_roles' ? 'roles' : each] = _[each] // overrides getters
    const roles = this.hasOwnProperty('roles') && this.roles // eslint-disable-line no-prototype-builtins
    if (Array.isArray(roles)) this.roles = roles.filter(r => !PSEUDO_ROLES.includes(r)).reduce ((p,n)=>{p[n]=1; return p},{})
    else PSEUDO_ROLES.forEach(r => delete this.roles[r])
  }

  get attr() { return super.attr = {} }
  get roles(){ return super.roles = {} }
  get _roles(){ return this.roles } // compatibility

  is (role) { 
    return role === 'any' || 
      role === 'identified-user' || 
      role === 'system-user' && this._is_system || 
      role === 'internal-user' && this._is_internal || 
      role === 'authenticated-user' || 
      !!this.roles[role] 
  }
  valueOf() { return this.id }

}

/**
 * Subclass representing non-identified unauthenticated users.
 */
class Anonymous extends User { is(role) { return role === 'any' }}
Object.defineProperties (Anonymous.prototype, {
  id: {value:'anonymous',writable:true},
  roles: {value:{}},
  attr: {value:{}},
  _is_anonymous: {value:true},
})

/**
 * Subclass for executing code with superuser privileges.
 */
class Privileged extends User { is(){ return true }}
Object.defineProperties (Privileged.prototype, {
  id: {value:'privileged',writable:true},
  roles: {value:{},writable:true},
  attr: {value:{},writable:true},
  _is_privileged: {value:true},
})


// exports -----------------
module.exports = exports = Object.assign (User, {
  Anonymous,  anonymous  : Object.seal (new Anonymous),
  Privileged, privileged : Object.seal (new Privileged),
  default: Anonymous,
})
