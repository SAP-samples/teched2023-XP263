const cds = require('../')
const _require = require('../../libx/_runtime/common/utils/require')
// _require for better error message
const express = _require('express')
const passport = _require('passport')
const { JWTStrategy } = _require('@sap/xssec')
const LOG = cds.log('auth')

module.exports = function jwt_auth(config) {
  // warn if no credentials
  if (!config.credentials) {
    LOG._warn &&
      LOG.warn(`
       No XSUAA instance bound to application, but "${config.kind}" configured.
       This is NOT recommended in production!
       `)

    return (req,res,next) => next()
  }

  passport.use(config.kind, new JWTStrategy(config.credentials))
  return express
    .Router()
    .use(passport.authenticate(config.kind, { session: false }))
    .use((req, res, next) => {
      const payload = req.tokenInfo.getPayload()

      let id = req.user.id
      let _is_system, _is_internal

      let roles = payload.scope.map(s => s.replace(new RegExp(`^(${config.credentials.xsappname + '.'})`), ''))
      roles.push('identified-user')
      if (payload.grant_type) {
        // > not "weak"
        roles.push('authenticated-user')

        const CLIENT = { client_credentials: 1, client_x509: 1 }
        if (payload.grant_type in CLIENT) {
          id = 'system'
          _is_system = true
          if (req.tokenInfo.getClientId() === config.credentials.clientid) _is_internal = true
        }
      }

      let attr = req.authInfo.getAttributes() || {}
      if (config.kind === 'xsuaa') {
        attr.logonName = req.authInfo.getLogonName()
        attr.givenName = req.authInfo.getGivenName()
        attr.familyName = req.authInfo.getFamilyName()
        attr.email = req.authInfo.getEmail()
      }

      req.user = new cds.User({ id, roles, attr, _is_system, _is_internal })
      req.tenant = req.tokenInfo.getZoneId?.()
      next()
    })
    .use((err, req, res, _next) => {
      if (req.tokenInfo) {
        LOG?.debug('error during token validation', req.tokenInfo.getErrorObject())
      }
      // REVISIT: reject request immediately as our other auth strategies do
      // should we call next(err)? -> I don't think so; it's not an error, is it?
      res.status(401).json({ code: '401', message: 'Unauthorized' }) // REVISIT: this is OData style?
    })
}
