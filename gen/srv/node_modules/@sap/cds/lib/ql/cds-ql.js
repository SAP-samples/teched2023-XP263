const Query = require('./Query')
require = path => { // eslint-disable-line no-global-assign
  const clazz = module.require (path); if (!clazz._api) return clazz
  const api = clazz._api()
  Object.defineProperty (clazz.prototype, 'cmd', { value: path.match(/\w+$/)[0] })
  return Object.assign (function (...args) {
    if (new.target) return new clazz (...args) // allows: new SELECT
    return api (...args)                      // allows: SELECT(...).from()
  }, api)
}

module.exports = {
  Query, clone: (q,_) => Query.prototype.clone.call(q,_),
  STREAM: require('./STREAM'),
  SELECT: require('./SELECT'),
  INSERT: require('./INSERT'),
  UPSERT: require('./UPSERT'),
  UPDATE: require('./UPDATE'),
  DELETE: require('./DELETE'),
  CREATE: require('./CREATE'),
  DROP:   require('./DROP'),
}

module.exports._reset = ()=>{ // for strange tests only
  const cds = require('../index')
  const _name = cds.env.sql.names === 'quoted' ? n =>`"${n}"` : n => n.replace(/[.:]/g,'_')
  Object.defineProperty (Query.prototype,'valueOf',{ configurable:1, value: function(cmd=this.cmd) {
    return `${cmd} ${_name(this._target.name)} `
  }})
  return this
}
