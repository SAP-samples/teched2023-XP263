const cds = require('../../index'), { decodeURIComponent } = cds.utils
const LOG = cds.log('hcql')
const express = require('express') // eslint-disable-line cds/no-missing-dependencies

module.exports = function HCQLAdapter (srv) {

  return express.Router()
  .use(express.json()) //> for application/json -> cqn
  .use(express.text()) //> for text/plain -> cql -> cqn

  /** Returns CSN schema in response to /<srv>/$csn requests */
  .get('/\\$csn', (_, res) => {
    let csn = cds.minify (cds.model, { service: srv.name })
    res.json(csn)
  })

  /** Convenience route for REST-style request formats like that: */
  .get('/:entity/:id?(%20:tail)?', (req, _, next) => {
    let { entity, id, tail } = req.params, q = SELECT.from(entity, id)
    if (is_string(req.body)) tail = req.body
    else if (is_array(req.body)) q.columns(req.body)
    else Object.assign(q.SELECT, req.body)
    if (tail) q = { SELECT: { ...CQL(`SELECT from _ ${tail}`).SELECT, ...q.SELECT } }
    req.body = q; next() // delegating to main handler
  })

  /** The actual protocol adapter. */
  .use((req, res, next) => {
    let q = req.body; if (is_string(q)) q = CQL(q)
    LOG.info (req.method, decodeURIComponent(req.originalUrl), { ...q })
    return srv.run(q).then(r => res.json(r)).catch(next)
  })

}

const is_string = x => typeof x === 'string'
const is_array = Array.isArray
