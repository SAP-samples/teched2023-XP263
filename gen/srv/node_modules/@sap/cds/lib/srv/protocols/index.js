const cds = require('../../index')
const {join} = cds.utils.path

class ProtocolAdapter {

  /**
   * Provides canonicalized protocols configurations
   */
  static init (protocols = { ...cds.env.protocols }) {
    for (let [k,o] of Object.entries(protocols)) if (typeof o === 'string') protocols[k] = {path:o}
    if (!protocols.odata) protocols.odata = { impl: join(__dirname,'odata-v4') }
    if (!protocols.rest) protocols.rest = { impl: join(__dirname,'rest') }
    // odata must always be first for fallback
    return this.protocols = { odata: protocols.odata, ...protocols }
  }

  /**
   * Returns the middleware impl for the given protocol
   */
  static middlewareFor (p) {
    const conf = this.protocols[p] || (this.protocols[p] = {})
    let { impl = join(__dirname,p) } = conf; if (typeof impl !== 'function') {
      try { require.resolve(impl) } catch { cds.error `Cannot find protocol adapter implementation: ${impl}` }
      impl = conf.impl = require(impl)
    }
    return impl
  }

  /**
   * Constructs a new adapter for the given service, or returns a formerly constructed one
   */
  static for (srv, p = srv.options?.to || protocol4(srv.definition)) {
    const cache = srv._adapters || (srv._adapters={}); if (p in cache) return cache[p]
    const impl = this.middlewareFor(p), conf = this.protocols[p]
    return cache[p] = impl (srv, conf)
  }

  /**
   * Constructs a new adapter for the given service, and mounts it to an express app.
   */
  static serve (srv, /* in: */ app, { before, after } = cds.middlewares) {
    const adapter = this.for(srv); if (!adapter) return
    app.use (srv.path+'/webapp/', (_,res) => res.sendStatus(404))
    app.use (srv.path, before, adapter, after)
    return adapter
  }

  /**
   * Serve protocols at configured paths, if any; e.g. /hcql/browse, /graphql/...
   */
  static serveAll (protocols = Object.entries(ProtocolAdapter.protocols).filter(([,o]) => o.path)) {
    if (protocols?.length) cds.once ('served', ()=>{
      const LOG = cds.log(), DEBUG = cds.debug('adapters')
      for (let [ protocol, options ] of protocols) {
        let globalAdapter = false
        for (let srv of cds.service.providers) {
          if (!protocol4(srv.definition,null)) {
            let adapter = ProtocolAdapter.middlewareFor(protocol); if (!adapter) continue
            if (is_global(adapter)) { globalAdapter = adapter; break }
            _serve (adapter(srv,options), options.path + srv.path, protocol, options)
          }
        }
        if (globalAdapter) {
          options = { ...options, services: cds.service.providers
            .filter (srv => { let p = protocol4(srv.definition,null); return !p || p === protocol })
            .reduce ((all,srv) => (all[srv.path.slice(1)] = srv, all), {})
          }
          _serve (globalAdapter(options), options.path, protocol, options)
        }
      }
      function _serve (adapter, path, protocol, options) {
        if (!_serve.first) { _serve.first = true; console.log() }
        if (!_serve[protocol]) LOG.info ('serving', _serve[protocol] = { protocol, at: options.path })
        DEBUG?.('app.use(', path, ', ... )')
        cds.app.use (path, cds.middlewares.before, adapter, cds.middlewares.after)
      }
    })
  }
}


const protocols = Object.keys(ProtocolAdapter.init())
const protocol4 = (def, _default = protocols[0]) => def?.['@protocol'] || protocols.find(p => def['@'+p]) || _default
const is_global = adapter => adapter.length === 1 && !/^(function )?(\w+\s+)?\((srv|service)/.test(adapter)

module.exports = { ProtocolAdapter, protocol4 }
if (cds.env.protocols) {
  cds.middlewares = require('../middlewares')
  ProtocolAdapter.serveAll()
} else if (!cds.requires.middlewares) {
  module.exports.ProtocolAdapter = require('./_legacy')
}
