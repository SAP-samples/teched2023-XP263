const { format } = require('util'), _formatted = v => format(v)


/**
 * This is the implementation of cds.error().
 * Usage variants:
 *
 *       cds.error `Message with formatted: ${{foo:'bar'}}`
 *       cds.error ({ message, code, ... })
 *       cds.error (message, { code, ... })
 *       let e = new cds.error(...) //> will not throw
 *
 * Calling `cds.error()` with `new` returns the newly created Error,
 * while calling it without `new` it throws immediately. The latter is
 * useful for usages like that:
 *
 *     let x = y || cds.error `Argument 'y' must not be null`
 */
const error = exports = module.exports = function cds_error (msg, _details, _base) {
  if (msg.raw) [ msg, _details, _base ] = [ error.message(...arguments) ]
  const e = msg.stack ? msg : typeof msg === 'string' ? new Error(msg) : Object.assign(new Error,msg)
  Error.captureStackTrace (e,_base||error)
  if (_details) Object.assign (e,_details)
  if (new.target) return e; else throw e
}


/**
 * Constructs a message from a tagged template string. In contrast to usual
 * template strings embedded values are formatted using `util.format`
 * not just `toString()`.
 *
 *     let x = `A sample message with ${'a string'}, ${{an:'object'}}, and ${[1,2,3]}`
 *     let y = cds.error.message`with ${'a string'}, ${{an:'object'}}, and ${[1,2,3]}`
 *     //> x = A sample message with a string and [object Object], and 1,2,3
 *     //> y = with a string, { an: 'object' }, and [ 1, 2, 3 ]
 */
exports.message = (strings,...values) => String.raw(strings,...values.map(_formatted))


/**
 * Use that to construct and throw errors from a tagged template string
 * in validations of function arguments.
 * Use it like that:
 *
 *     let x = {foo:'bar'}
 *     typeof x === 'string' || cds.error.expected `${{x}} to be a string`
 *     //> Error: Expected argument 'x' to be a string, but got: { foo: 'bar' }
 */
const expected = exports.expected = ([,type], arg) => {
  const [ name, value ] = Object.entries(arg)[0]
  return error (`Expected argument '${name}'${type}, but got: ${require('util').inspect(value,{depth:11})}`, undefined, expected)
}


//
// Private helpers ...
//

exports._duplicate_cds = (...locations) => {
  const { local } = require('../utils/cds-utils')
  throw error `Duplicate @sap/cds/common!

  There are duplicate versions of @sap/cds loaded from these locations:

    ${locations.map(local).join('\n    ')}

  To fix this, check all dependencies to "@sap/cds" in your package.json and
  those of reused packages and ensure they allow deduped use of @sap/cds.
  `
}

exports._no_primary_db = (p,_base) => error (`Not connected to primary datasource!

  Attempt to use 'cds.${p}' without prior connect to primary datasource,
  i.e. cds.connect.to('db').
  ${ process.argv[1].endsWith('cds') && process.argv[2] in {run:1,serve:1} ? `
  Please configure one thru 'cds.requires.db' or use in-memory db:
  cds ${process.argv[2]} --in-memory` : ''}`

,{},_base)
