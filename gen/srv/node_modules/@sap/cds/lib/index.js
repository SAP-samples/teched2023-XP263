/** @typedef {import './serve/Service-api'} Service */

const facade = class cds extends require('events') {

  get env()      { return super.env = require('./env/cds-env').for('cds',cds.root) }
  get requires() { return super.requires = this.env.requires._resolved() }
  get version()  { return super.version = require('../package.json').version }
  get builtin()  { return super.builtin = require('./core') }
  get service()  { return super.service = extend(this.builtin.classes.service) .with (_service) }
  get _context() { return super._context = require('./req/cds-context') }
  get context() { return this._context._for(this) }
  set context(_){ this._context._for(this,_) }
  get spawn() { return super.spawn = this._context.spawn }

  async emit (eve, ...args) {
    // if (eve === 'served') return Promise.all (this.listeners(eve).map (l => l.call(this,...args)))
    if (eve === 'served') for (let l of this.listeners(eve)) await l.call(this,...args)
    else return super.emit (eve, ...args)
  }
}

const { extend, lazify, lazified } = require ('./lazy')
const _class = lazy => cds.builtin.classes [lazy]
const _require = require; require = lazified (module)  // eslint-disable-line
const _service = lazified ({ // nested facade for service-related modules
  /** @param x {(this:Service, srv:Service, ...etc) => any} */ impl: x=>x,
  /** @type Service[] */ providers: [],
  factory: require ('./srv/factory'),
  protocols: require ('./srv/protocols'),
  bindings: require ('./srv/bindings'),
})

/** cds is the central facade to all cds functions */
const cds = module.exports = extend (new facade) .with ({

  // Builtin types and classes
  Association:_class,
  Composition:_class,
  entity:_class,
  event:_class,
  type:_class,
  array:_class,
  struct:_class,

  // Model Reflection
  reflect: require ('./core/reflect'),
  linked: require ('./core/reflect'),
  infer: require ('./core/infer'),

  // Loading and Compiling Models
  model: undefined,
  compiler: require ('./compile/cdsc'),
  compile: require ('./compile/cds-compile'),
  resolve: require ('./compile/resolve'),
  load: require ('./compile/load'), get: lazy => cds.load.parsed,
  parse: require ('./compile/parse'),
  minify: require ('./compile/minify'),
  extend: require ('./compile/extend'),
  deploy: require ('./dbs/cds-deploy'),

  // Providing and Consuming Services
  connect: require ('./srv/cds-connect'),
  serve: require ('./srv/cds-serve'),
  server: require ('../server'),
  services: new class IterableServices {
    *[Symbol.iterator]() {for (let e in this) yield this[e]}
    get _pending(){ let p={}; Object.defineProperty(this,'_pending',{value:p}); return p  }
  },
  middlewares: require('./srv/middlewares'),
  auth: require ('./auth'),

  // Core Services API
  Service: require ('./srv/srv-api'),
  EventContext: require ('./req/context'),
  Request: require ('./req/request'),
  Event: require ('./req/event'),
  User: require ('./req/user'),
  ql: lazy => require ('./ql/cds-ql'),
  tx: (..._) => (cds.db || cds.Service.prototype) .tx (..._),
  inferred: lazy => require('@cap-js/sqlite/lib/ql/cds.infer'), // eslint-disable-line cds/no-missing-dependencies
  cqn2sql: lazy => require('@cap-js/sqlite/lib/db/sql/cqn2sql'), // eslint-disable-line cds/no-missing-dependencies
  cqn4sql: lazy => require('@cap-js/sqlite/lib/db/sql/cqn4sql'), // eslint-disable-line cds/no-missing-dependencies
  /** @type Service */ db: undefined,

  // Protocols and Periphery
  ApplicationService: lazy => require('../libx/_runtime/cds-services/services/Service.js'),
  MessagingService: lazy => require('../libx/_runtime/messaging/service.js'),
  DatabaseService: lazy => require('../libx/_runtime/db/Service.js'),
  RemoteService: lazy => require('../libx/_runtime/remote/Service.js'),
  AuditLogService: lazy => require('../libx/_runtime/audit/Service.js'),
  odata: require('../libx/odata'),

  // Helpers
  localize: require ('./i18n/localize'),
  error: require ('./log/cds-error'),
  utils: require ('./utils/cds-utils'),
  test: require ('./utils/cds-test'),
  log: require ('./log/cds-log'), debug: lazy => cds.log.debug,
  exec: require ('../bin/cds'),
  exit: (code) => cds.shutdown ? cds.shutdown() : process.exit(code),
  clone: m => JSON.parse (JSON.stringify(m)),
  lazified, lazify,

  // Configuration & Information
  home: __dirname.slice(0,-4),
  root: lazy => process.cwd(),

})


// cds as shortcut to cds.db -> for compatibility only
extend (cds.__proto__) .with ({
  get entities(){ return (cds.db||_missing).entities },
  transaction: (..._) => (cds.db||_missing).transaction(..._),
  run:         (..._) => (cds.db||_missing).run(..._),
  foreach:     (..._) => (cds.db||_missing).foreach(..._),
  stream:      (..._) => (cds.db||_missing).stream(..._),
  read:        (..._) => (cds.db||_missing).read(..._),
  create:      (..._) => (cds.db||_missing).create(..._),
  insert:      (..._) => (cds.db||_missing).insert(..._),
  update:      (..._) => (cds.db||_missing).update(..._),
  delete:      (..._) => (cds.db||_missing).delete(..._),
  disconnect:  (..._) => (cds.db||_missing).disconnect(..._),
})
/** @type Service */ const _missing = new Proxy ({},{
  get:function fn(_,p){ cds.error._no_primary_db(p,fn) }
})

// legacy and to be moved stuff -> hidden for tools in cds.__proto__
extend (cds.__proto__) .with (lazified ({
  /** @deprecated */ in: (cwd) => !cwd ? cds : {__proto__:cds, cwd, env: cds.env.for('cds',cwd) },
  mtx: lazy => require('../bin/mtx/in-cds'),
  build: lazy => require('../bin/build')
}))

// Add global forwards to cds.ql and cds.parse
const odp = Object.defineProperty, _global = (_,...pp) => pp.forEach (p => odp(global,p,{
  configurable:true, get:()=>{ let v=cds[_][p]; odp(this,p,{value:v}); return v }
}))
_global ('ql','SELECT','INSERT','UPSERT','UPDATE','DELETE','CREATE','DROP','STREAM')
_global ('parse','CDL','CQL','CXL')

// Check Node.js version
if (process.env.CDS_STRICT_NODE_VERSION !== 'false') {
  const v = version => { let vv = version.split('.'); return { version, major: +vv[0], minor: +vv[1] }}
  const required = v(_require('../package.json').engines.node.match(/>=(.*)/)[1])
  const given = v(process.version.match(/^v(\d+\.\d+)/)[1])
  if (given.major < required.major || given.major === required.major && given.minor < required.minor) process.exit (process.stderr.write (`
  Node.js v${required.version} or higher is required for @sap/cds.
  Current v${given.version} does not satisfy this.
  \n`) || 1)
}

// restore require for subsequent uses in lazy getters
require = _require  // eslint-disable-line

// can be used to later check that one has only one cds object
if (!global.__cds_loaded_from) global.__cds_loaded_from = new Set
global.__cds_loaded_from.add(__filename)

if (process.env.CDS_GLOBAL) // TODO for stakeholder-tests only. Remove after cds 6.
  Object.assign(module,{ exports: global.cds || (global.cds = cds)})
else
  global.cds = cds

// install jest util if jest is defined
if (process.env.CDS_JEST_MEM_FIX && typeof jest !== 'undefined') require('./utils/jest.js')
