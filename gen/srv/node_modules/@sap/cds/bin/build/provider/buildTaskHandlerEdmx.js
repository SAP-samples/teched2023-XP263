const path = require('path')
const cds = require('../cds')
const BuildTaskHandlerFeatureToggles = require('./buildTaskHandlerFeatureToggles')
const { BUILD_OPTION_OUTPUT_MODE, OUTPUT_MODE_RESULT_ONLY } = require('../constants')

class BuildTaskHandlerEdmx extends BuildTaskHandlerFeatureToggles {
    async compileToEdmx(model, edmxDest, compileOptions = {}) { // NOSONAR
        const promises = []

        // generate edmx for services only that have the odata protocol
        const serviceNames = cds.reflect(model).services
            .filter(service => this._isOdataProtocol(service))
            .map(service => service.name)

        // TODO mtx build_helper tests currently expects this, strange...
        this._result.languages.add('')

        // new compile impl is throwing error in case no services exist!
        if (serviceNames.length > 0) {
            const options = {
                ...this._options4edmx(),
                ...compileOptions,
                serviceNames
            }
            this.logger._debug && this.logger.debug(`compiling edmx files using OData version ${options.version}`)

            const result = cds.compile.to.edmx(model, options)

            if (result) {
                let langs = this.task.options.lang || cds.env.i18n.languages
                if (langs.split) { // string to array
                    langs = langs.split(',')
                }
                if (langs.length > 0 && langs[0] !== 'all' && langs.indexOf('') < 0) {
                    langs.push('')  // make sure fallback language is in, runtimes expect it
                }
                for (let [content, key] of result) {
                    const serviceName = key.file ? key.file : key.name
                    this._result.services.add(serviceName)
                    const locResult = cds.localize(model, langs, content)
                    if (locResult[Symbol.iterator]) { // multi result
                        for (let [localizedContent, { lang }] of locResult) {
                            promises.push(this._writeEdmxForLang(localizedContent, serviceName, lang, edmxDest))
                        }
                    } else { // single result
                        promises.push(this._writeEdmxForLang(locResult, serviceName, langs[0], edmxDest))
                    }
                }
            }
        }
        return Promise.all(promises)
    }

    _isOdataProtocol(srv) {
        return cds.service.protocols.protocol4(srv).startsWith('odata')
    }

    _options4odata() {
        const o = this.options()
        o.version = cds.env.odata.version
        return o
    }

    _options4edmx() {
        const o = this._options4odata()
        o.service = 'all'
        return o
    }

    _writeEdmxForLang(content, serviceName, lang, edmxDest) {
        this._result.languages.add(lang)
        const fileName = serviceName + (lang ? '_' + lang + '.xml' : '.xml')
        this._result.edmx.set(fileName, content)

        //edmxDest might be null
        if (edmxDest && !this.hasBuildOption(BUILD_OPTION_OUTPUT_MODE, OUTPUT_MODE_RESULT_ONLY)) {
            return this.write(content).to(path.join(edmxDest, fileName))
        }
        return Promise.resolve()
    }
}
module.exports = BuildTaskHandlerEdmx
