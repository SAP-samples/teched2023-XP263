const cp = require('child_process');
const path = require('path');
const fs = require('fs').promises;
const util = require('util');

const cds = require('../../../lib');
const LOG = cds.log ? cds.log('deploy') : console;

const GIT_IGNORE_FILE = '.gitignore';

class GitUtil {

    constructor() {
        this.execAsync = util.promisify(cp.exec);
    }

    async ensureFileIsGitignored(file, currentFolder = process.cwd()) {
        const gitIgnorePath = path.join(currentFolder, GIT_IGNORE_FILE);

        try {
            await this.execAsync(`git check-ignore -n -v ${file}`, {
                cwd: currentFolder
            });
            return; // file is git ignored
        } catch (err) {
            if (err.code === 'ENOENT') {   // git command not found
                LOG.debug('git command not found');
                return;
            }

            if (!err.stdout.match(/::/)) {   // included or not a git repo
                LOG.debug(err.message);
                return;
            }
        }

        console.log(`adding entry '${file}' to ${GIT_IGNORE_FILE}.`);
        let gitignore = await this.readFileSafely(gitIgnorePath);
        gitignore = gitignore + `
    # added by cds deploy
    ${file}
    `;

        await fs.mkdir(path.dirname(gitIgnorePath), { recursive: true });
        await fs.writeFile(gitIgnorePath, gitignore, 'utf8');
    }

    async readFileSafely(file) {
        try {
            return await fs.readFile(file, 'utf8');
        } catch (err) {
            return '';
        }
    }
}

module.exports = new GitUtil();
