/* eslint-disable no-console */
const { dirname, join, resolve } = require ('path')
const { cwd } = require('process')
module.exports = Object.assign(list_versions, {
  flags: [ '--info', '--markdown', '--all', '--npm-list', '--npm-tree', '--no-colors'],
  shortcuts: [ '-i', '-m','-a', '-ls', '-ll' ],
  info,
  help: `
# SYNOPSIS

    *cds version* <options>
    *cds -v* <option>

    Prints the versions of all @sap/cds packages in your package dependencies.

# OPTIONS

    *-i  | --info*

      Prints version information in a tabular markdown format, which you
      can embed into your bug reports.

    *-a  | --all*

      Also lists sub-packages and optional dependencies.

    *-ls | --npm-list* <pattern>
    *-ll | --npm-tree* <pattern>

      Prints an npm ls tree filtered to the specified pattern.
      (default: '@sap/cds')

`})

const MISSING = '-- missing --'

function list_versions(args, options) { //NOSONAR
  if (options['npm-list'] || options['npm-tree']) {
    let [pattern] = args, re = pattern ? RegExp(pattern) : /@sap\/cd[rs]|@sap\/eslint-plugin-cds/
    let cmd = 'npm ls --depth ' + (options['npm-tree'] ? 11 : 0)
    console.log (cmd,'| grep', pattern)
    return require('child_process').exec(cmd, (e,stdout)=>{
      // if (e) console.error(e)
      const replacement = (options['no-colors'] ? '$1 $2$3$4' : '\x1b[91m$1 \x1b[32m$2\x1b[0m\x1b[2m$3\x1b[32m$4\x1b[0m');
      for (let line of stdout.split(/\n/)) if (line.match(re)) console.log(
        line.replace(/(@sap[^@]*)@([\S]+)( -> [\S]+)?(deduped)?/,replacement)
      )
    })
  }
  const versions = info (options)
  if (options.markdown)  return _markdown (versions)
  if (options.info)  return _markdown (versions)
  const mark = options['no-colors'] ? s => s : require('./utils/term').info
  for (let each of Object.keys(versions).sort())  console.log(`${mark(each)}: ${versions[each]}`)
}

function info(o) {
  const { npmGlobalModules } = require('./utils/modules');
  const main = _findPackage (require.main.filename)
  const sap_cds = require.resolve('@sap/cds/package.json', {paths:[process.cwd(), __dirname]})
  return {
    // REVISIT: Why do we need all these different hard-coded ways, including proliferation of arguments?
    ..._versions4(main, {}, true),  // usually sap/cds-dk or sap/cds
    ..._versions4('@sap/cds-dk', {}, null, o),  // make sure cds-dk is there, cds-maven-plugin uses it
    ..._versions4('@sap/cds-dk', {}, null, {...o, label: '@sap/cds-dk (global)', pkg: join(npmGlobalModules(), '@sap/cds-dk')}),
    ..._versions4('@sap/eslint-plugin-cds', {}, null, o),
    ..._versions4(process.cwd(), {}, null, o),
    ..._versions4('..', {}, null, o),
    ..._findMTX(),
    '@sap/cds': require(sap_cds).version, // ensure effective sap/cds version is listed
    'Node.js': process.version,
    'home': __dirname.slice(0,-4)
  }
}

function _versions4 (pkg_name, info, parent, o={}) {
  if (!pkg_name)  return info
  try {
    let path = join(o.pkg || pkg_name, 'package.json')
    if(o.here) {
      // path.join(['./', x]) is immediately resolved to x.
      // Calling require() on that will then follow the standard (global) module resolution strategy.
      // If we want to look into a directory relative to CWD,
      // turning it into a global path is the most convenient way.
      path = join(cwd(), path)
    }
    const pkg = require(path)
    info[o.label || pkg.name] = pkg.version
    // console.log(o.label || pkg.name, pkg.version, path)
    if (!parent || o.all) for (let d in pkg.dependencies) { // recurse sap packages in dependencies...
      if (!(d in info) && (d.startsWith('@sap/') || d.startsWith('@cap-js/'))) _versions4(d, info, pkg.name, o)
    }
  } catch (e) {
    if (e.code !== 'MODULE_NOT_FOUND') info[pkg_name] = MISSING  // unknown error
    // require fails for indirect packages if node_modules layout is nested, e.g. on Windows.
    // Try one more time with nested node_modules dir.
    else if (parent) _versions4(parent + '/node_modules/' + pkg_name, info)
  }
  return info
}


function _markdown (versions) {
  console.log()
  const pkg = { name:'', repository:'', version:'' }; try {
    Object.assign (pkg, require (resolve('package.json')))
  } catch (e) {/* ignored */}
  console.log ('|', pkg.name, '|', pkg.repository.url || pkg.repository, '|')
  console.log ('|:---------------------- | ----------- |')
  if (require('../lib').env['project-nature'] === 'nodejs') {
    console.log ('|', v('Node.js'), '|')
    console.log ('|', v('@sap/cds'), '|')
  } else {
    console.log ('|', v('CAP Java Runtime'), '|')
    console.log ('|', v('OData Version'), '|')
  }
  console.log ('|', v('@sap/cds-compiler'), '|')
  console.log ('|', v('@sap/cds-dk'), '|')
  console.log ('|', v('@sap/cds-dk (global)'), '|')
  console.log ('|', v('@sap/eslint-plugin-cds'), '|')
  function v (component) {
    const version = versions [component] || '_version_'
    return (component + '               ').slice(0,22)
    +' | '+ (version  + '           ').slice(0,11)
  }
  console.log()
}

function _findPackage (dir) {
  try {
    if (dir) {
      require.resolve(join (dir, 'package.json'))
      return dir
    }
  } catch (e) {
    if (e.code !== 'MODULE_NOT_FOUND')  throw e
    return _findPackage (dirname (dir))
  }
}

function _findMTX() {
  // looks for any occurrence of cds-mtx.
  // In node projects, cds-mtx can be resolved via _versions4 like all the other SAP modules
  // In Java-flavoured projects cds-mtx may be deployed through a separate node project
  // with just sidecar in it. So we can not rely on the global require() resolution strategy
  // and will as a fallback...
  // (1) ...look for an MTX project within cds.env
  // (2) ...look within a few preselected subdirectories which often contain MTX projects
  const cds = require('../lib')
  const cdsmtx = '@sap/cds-mtx'
  let res = _versions4 (cdsmtx, {}, null)

  if (res[cdsmtx] === undefined) {
    // not resolvable -> look in cds.env
    if ('build' in cds.env && 'tasks' in cds.env.build) {
      let i = 0
      while (res[cdsmtx] === undefined && i < cds.env.build.tasks.length) {
        const task = cds.env.build.tasks[i]
        if ('for' in task && task.for === 'mtx' && 'dest' in task) {
          res = _versions4 (join(task.dest, 'node_modules', cdsmtx), {}, null, {here: true})
        }
        i++
      }
    }

    // mtx still not found via cds.env? Try looking in well-known subdirectories
    const folders = cds.env.folders
                    ? [cds.env.folders.db, cds.env.folders.srv].flat().filter(d => d)
                    : []
    let i = 0
    while(res[cdsmtx] === undefined && i < folders.length) {
      res = _versions4 (join(folders[i], 'node_modules', cdsmtx), {}, null, {here: true})
      i++
    }
    res[cdsmtx] = res[cdsmtx] || MISSING
  }
  return res
}
