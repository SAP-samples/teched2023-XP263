"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.retry = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const asyncRetry = __importStar(require("async-retry"));
const logger = (0, util_1.createLogger)({
    package: 'resilience',
    messageContext: 'retry'
});
const defaultRetries = 3;
/**
 * Helper method to build a retry middleware.
 * @param retries - Number of retry attempts. Default value is 3.
 * @returns The middleware adding a retry to the function.
 */
function retry(retries = defaultRetries) {
    if (retries < 0) {
        throw new Error('Number of retries must be greater or equal to 0.');
    }
    return function (options) {
        return arg => asyncRetry.default(async (bail) => {
            try {
                return await options.fn(arg);
            }
            catch (error) {
                // Don't retry on error statuses where a second attempt won't help
                const status = error?.response?.status;
                if (!status) {
                    logger.debug('HTTP request failed but error did not contain a response status field as expected. Rethrowing error.');
                }
                else if (status.toString().startsWith('4')) {
                    bail(new Error(`Request failed with status code ${status}`));
                    // We need to return something here but the actual value does not matter
                    return undefined;
                }
                throw error;
            }
        }, { retries });
    };
}
exports.retry = retry;
//# sourceMappingURL=retry.js.map