"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.shouldExchangeToken = exports.exchangeToken = void 0;
const xssec = __importStar(require("@sap/xssec"));
const environment_accessor_1 = require("./environment-accessor");
const jwt_1 = require("./jwt");
/**
 * @internal
 * Make a token exchange from IAS token to XSUAA token.
 * @param options - Configuration for how to retrieve destinations from the destination service.
 * @returns Exchanged token.
 */
async function exchangeToken(options) {
    const xsuaaServiceCredentials = (0, environment_accessor_1.getXsuaaServiceCredentials)();
    return new Promise((resolve, reject) => {
        xssec.createSecurityContext(options.jwt, xsuaaServiceCredentials, (err, context, tokenInfo) => err ? reject(err) : resolve(tokenInfo.getTokenValue()));
    });
}
exports.exchangeToken = exchangeToken;
/**
 * @internal
 * Checks whether the IAS token to XSUAA token exchange should be applied.
 * @param options - Configuration for how to retrieve destinations from the destination service.
 * @returns A boolean value, that indicates whether the token exchange should be applied.
 */
function shouldExchangeToken(options) {
    // iasToXsuaaTokenExchange is optional, token exchange is enabled by default
    return (options.iasToXsuaaTokenExchange !== false &&
        !!options.jwt &&
        !(0, jwt_1.isXsuaaToken)((0, jwt_1.decodeJwtComplete)(options.jwt)));
}
exports.shouldExchangeToken = shouldExchangeToken;
//# sourceMappingURL=identity-service.js.map