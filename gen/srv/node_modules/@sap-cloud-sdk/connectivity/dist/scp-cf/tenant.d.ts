import { JwtPayload } from './jsonwebtoken-type';
import { JwtKeyMapping } from './jwt';
/**
 * Mapping between key name in the tenant and key name in decoded JWT.
 * @internal
 */
export declare const mappingTenantFields: JwtKeyMapping<Tenant, 'zid' | 'zdn'>;
/**
 * Get the tenant name of a decoded JWT.
 * @param jwtPayload - Token payload to read the tenant name from.
 * @returns The tenant name, if available.
 * @internal
 */
export declare function tenantName(jwtPayload: JwtPayload): string | undefined;
/**
 * Get the tenant id of a decoded JWT, based on its `zid` property.
 * @param jwtPayload - Token payload to read the tenant id from.
 * @returns The tenant id, if available.
 * @internal
 */
export declare function tenantId(jwtPayload: JwtPayload): string | undefined;
/**
 * Get the tenant id of a decoded JWT, based on its `zid` property or, if not available, the `iss` subdomain.
 * @param token - Token to read the tenant id from.
 * @returns The tenant id, if available.
 * @internal
 */
export declare function getTenantIdWithFallback(token: string | undefined): string | undefined;
/**
 * Representation of the tenant. A tenant represents the customer account on Cloud Foundry.
 * @internal
 */
export interface Tenant {
    /**
     * @internal
     */
    id: string;
    /**
     * @internal
     */
    name?: string;
}
/**
 * Compare two decoded JWTs based on their `tenantId`s.
 * @param userTokenPayload - User JWT payload.
 * @param providerTokenPayload - Provider JWT payload.
 * @returns Whether the tenant is identical.
 * @internal
 */
export declare function isIdenticalTenant(userTokenPayload: JwtPayload, providerTokenPayload: JwtPayload): boolean;
