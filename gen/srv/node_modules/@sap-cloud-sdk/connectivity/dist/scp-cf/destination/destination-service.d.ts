import { DestinationFetchOptions } from './destination-accessor-types';
import { Destination, DestinationCertificate } from './destination-service-types';
type DestinationsServiceOptions = Pick<DestinationFetchOptions, 'useCache'>;
type DestinationServiceOptions = Pick<DestinationFetchOptions, 'destinationName' | 'retry'>;
/**
 * Fetches all instance destinations from the given URI.
 * @param destinationServiceUri - The URI of the destination service
 * @param jwt - The access token
 * @param options - Options to use by retrieving destinations
 * @returns A promise resolving to a list of instance destinations
 * @internal
 */
export declare function fetchInstanceDestinations(destinationServiceUri: string, jwt: string, options?: DestinationsServiceOptions): Promise<Destination[]>;
/**
 * Fetches all subaccount destinations from the given URI.
 * @param destinationServiceUri - The URI of the destination service
 * @param jwt - The access token
 * @param options - Options to use by retrieving destinations
 * @returns A promise resolving to a list of subaccount destinations
 * @internal
 */
export declare function fetchSubaccountDestinations(destinationServiceUri: string, jwt: string, options?: DestinationsServiceOptions): Promise<Destination[]>;
/**
 * @internal
 */
export interface AuthAndExchangeTokens {
    /**
     * @internal
     */
    authHeaderJwt: string;
    /**
     * @internal
     */
    exchangeHeaderJwt?: string;
    /**
     * @internal
     */
    exchangeTenant?: string;
    /**
     * @internal
     */
    refreshToken?: string;
}
/**
 * Fetches a specific destination by name from the given URI, including authorization tokens.
 * For destinations with authenticationType OAuth2SAMLBearerAssertion, this call will trigger the OAuth2SAMLBearerFlow against the target destination.
 * In this pass the access token as string.
 * Fetches a specific destination with authenticationType OAuth2UserTokenExchange by name from the given URI, including authorization tokens.
 * @param destinationServiceUri - The URI of the destination service
 * @param token - The access token or AuthAndExchangeTokens if you want to include the X-user-token for OAuth2UserTokenExchange.
 * @param options - Options to use by retrieving destinations
 * @returns A Promise resolving to the destination
 * @internal
 */
export declare function fetchDestination(destinationServiceUri: string, token: string | AuthAndExchangeTokens, options: DestinationServiceOptions): Promise<Destination>;
/**
 * Fetches a certificate from the subaccount and destination instance for a given a name.
 * Subaccount is tried first.
 * @param destinationServiceUri - The URI of the destination service
 * @param token - The access token for destination service.
 * @param certificateName - Name of the Certificate to be fetched
 * @returns A Promise resolving to the destination
 * @internal
 */
export declare function fetchCertificate(destinationServiceUri: string, token: string, certificateName: string): Promise<DestinationCertificate | undefined>;
export {};
