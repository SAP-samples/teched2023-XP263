"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getJwtForUser = exports.getJwtForTenant = exports.hasTokens = exports.getRequiredSubscriberToken = exports.getSubscriberToken = exports.isSubscriberToken = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const jwt_1 = require("../jwt");
const token_accessor_1 = require("../token-accessor");
const logger = (0, util_1.createLogger)({
    package: 'connectivity',
    messageContext: 'destination-accessor-service'
});
/**
 * @internal
 * @param token - The token to check
 * @returns Whether the given token is a subscriber token.
 */
function isSubscriberToken(token) {
    return token.userJwt || token.serviceJwt;
}
exports.isSubscriberToken = isSubscriberToken;
/**
 * @internal
 */
async function getSubscriberToken(options) {
    const isXsuaaJwt = !!options.jwt && (0, jwt_1.isXsuaaToken)((0, jwt_1.decodeJwtComplete)(options.jwt));
    return {
        userJwt: await retrieveUserToken(options, isXsuaaJwt),
        serviceJwt: await retrieveServiceToken(options, isXsuaaJwt)
    };
}
exports.getSubscriberToken = getSubscriberToken;
async function retrieveUserToken(options, isXsuaaJwt) {
    if (options.jwt) {
        if (!options.iss && isXsuaaJwt) {
            await (0, jwt_1.verifyJwt)(options.jwt, options);
        }
        return (0, jwt_1.getJwtPair)(options.jwt);
    }
}
async function retrieveServiceToken(options, isXsuaaJwt) {
    const jwt = getJwtForServiceToken(options, isXsuaaJwt);
    if (jwt) {
        return (0, jwt_1.getJwtPair)(await (0, token_accessor_1.serviceToken)('destination', {
            ...options,
            jwt
        }));
    }
}
function getJwtForServiceToken(options, isXsuaaJwt) {
    if (options.iss) {
        logger.debug('Using `iss` option instead of a full JWT to fetch a destination. No validation is performed.');
        return { iss: options.iss };
    }
    if (options.jwt && isXsuaaJwt) {
        return options.jwt;
    }
}
/**
 * @internal
 * Get a subscriber token pair with required fields. Checks that at least one of the tokens exists and sets defaults if needed.
 * @returns The decoded subscriber tokens.
 */
function getRequiredSubscriberToken(token) {
    if (token) {
        const { userJwt, serviceJwt } = token;
        const requiredToken = {
            userJwt: userJwt || serviceJwt,
            serviceJwt: serviceJwt || userJwt
        };
        if (isRequired(requiredToken)) {
            return requiredToken;
        }
    }
    throw new Error('Could not get subscriber token: Token value is undefined.');
}
exports.getRequiredSubscriberToken = getRequiredSubscriberToken;
/**
 * Type guard to check whether a token has both `userJwt` and `serviceJwt` defined.
 * @param token - Token to check.
 * @returns Whether both tokens are defined.
 */
function isRequired(token) {
    return !!(token?.userJwt && token.serviceJwt);
}
/**
 * @internal
 * Check whether the subscriber token has one of the tokens set
 * @param token - Subscriber token pair to check
 * @returns True if at least one of the tokens exist.
 */
function hasTokens(token) {
    return !!token?.userJwt || !!token?.serviceJwt;
}
exports.hasTokens = hasTokens;
/**
 * @internal
 * Retrieve the token to use for tenant identification.
 *
 * If `iss` or XSUAA user JWT was passed, this is the `serviceJwt`.
 * If a custom user JWT was passed, this is used.
 * @param token - The subscriber token for service and user.
 * @returns The decoded JWT to use for tenant identification.
 */
function getJwtForTenant(token) {
    return token.serviceJwt;
}
exports.getJwtForTenant = getJwtForTenant;
/**
 * @internal
 * Retrieve the token to use for user identification.
 *
 * If a user token was passed, this is used.
 * If only `iss` was passed try to get the user from the service token.
 * @param token - The subscriber token for service and user.
 * @returns The decoded JWT to use for user identification.
 */
function getJwtForUser(token) {
    return token.userJwt;
}
exports.getJwtForUser = getJwtForUser;
//# sourceMappingURL=get-subscriber-token.js.map