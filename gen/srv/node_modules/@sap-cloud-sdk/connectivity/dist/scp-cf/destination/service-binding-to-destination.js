"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serviceToDestinationTransformers = void 0;
const token_accessor_1 = require("../token-accessor");
const jwt_1 = require("../jwt");
/**
 * @internal
 */
exports.serviceToDestinationTransformers = {
    'business-logging': businessLoggingBindingToDestination,
    's4-hana-cloud': xfS4hanaCloudBindingToDestination,
    destination: destinationBindingToDestination,
    'saas-registry': saasRegistryBindingToDestination,
    workflow: workflowBindingToDestination,
    'service-manager': serviceManagerBindingToDestination,
    xsuaa: xsuaaToDestination
};
async function xsuaaToDestination(service, options) {
    const token = await (0, token_accessor_1.serviceToken)(service, options);
    return buildClientCredentialsDestination(token, service.credentials.apiurl, service.name);
}
async function serviceManagerBindingToDestination(service, options) {
    const token = await (0, token_accessor_1.serviceToken)(service, options);
    return buildClientCredentialsDestination(token, service.credentials.sm_url, service.name);
}
async function destinationBindingToDestination(service, options) {
    const token = await (0, token_accessor_1.serviceToken)(service, options);
    return buildClientCredentialsDestination(token, service.credentials.uri, service.name);
}
async function saasRegistryBindingToDestination(service, options) {
    const token = await (0, token_accessor_1.serviceToken)(service, options);
    return buildClientCredentialsDestination(token, service.credentials['saas_registry_url'], service.name);
}
async function businessLoggingBindingToDestination(service, options) {
    const transformedService = {
        ...service,
        credentials: { ...service.credentials.uaa }
    };
    const token = await (0, token_accessor_1.serviceToken)(transformedService, options);
    return buildClientCredentialsDestination(token, service.credentials.writeUrl, service.name);
}
async function workflowBindingToDestination(service, options) {
    const transformedService = {
        ...service,
        credentials: { ...service.credentials.uaa }
    };
    const token = await (0, token_accessor_1.serviceToken)(transformedService, options);
    return buildClientCredentialsDestination(token, service.credentials.endpoints.workflow_odata_url, service.name);
}
async function xfS4hanaCloudBindingToDestination(service) {
    return {
        url: service.credentials.URL,
        authentication: 'BasicAuthentication',
        username: service.credentials.User,
        password: service.credentials.Password
    };
}
function buildClientCredentialsDestination(token, url, name) {
    const expirationTime = (0, jwt_1.decodeJwt)(token).exp;
    const expiresIn = expirationTime
        ? Math.floor((expirationTime * 1000 - Date.now()) / 1000).toString(10)
        : undefined;
    return {
        url,
        name,
        authentication: 'OAuth2ClientCredentials',
        authTokens: [
            {
                value: token,
                type: 'bearer',
                expiresIn,
                http_header: { key: 'Authorization', value: `Bearer ${token}` },
                error: null
            }
        ]
    };
}
//# sourceMappingURL=service-binding-to-destination.js.map