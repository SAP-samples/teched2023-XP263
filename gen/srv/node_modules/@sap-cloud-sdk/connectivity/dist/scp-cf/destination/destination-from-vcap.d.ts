import { JwtPayload } from '../jsonwebtoken-type';
import { Service } from '../environment-accessor/environment-accessor-types';
import { Destination } from './destination-service-types';
import type { DestinationFetchOptions } from './destination-accessor-types';
/**
 * Represents partial options to fetch destinations.
 */
export interface PartialDestinationFetchOptions {
    /**
     * The fetched destination will be cached if set to true.
     */
    useCache?: boolean;
    /**
     * The jwt payload used to fetch destinations.
     */
    jwt?: JwtPayload;
}
/**
 * Tries to build a destination from a service binding with the given name.
 * Throws an error if no services are bound at all, no service with the given name can be found, or the service type is not supported.
 * The last error can be circumvent by using the second parameter to provide a custom function that transforms a service binding to a destination.
 * @param serviceInstanceName - The name of the service.
 * @param options - Options to customize the behavior of this function.
 * @returns A destination.
 */
export declare function destinationForServiceBinding(serviceInstanceName: string, options?: DestinationForServiceBindingOptions & PartialDestinationFetchOptions): Promise<Destination>;
/**
 * Options to customize the behavior of {@link destinationForServiceBinding}.
 */
export interface DestinationForServiceBindingOptions {
    /**
     * Custom transformation function to control how a {@link Destination} is built from the given {@link Service}.
     */
    serviceBindingTransformFn?: ServiceBindingTransformFunction;
}
/**
 * Type of the function to transform the service binding.
 */
export type ServiceBindingTransformFunction = (service: Service, options?: PartialDestinationFetchOptions) => Promise<Destination>;
/**
 * @internal
 */
export declare function searchServiceBindingForDestination({ iss, jwt, serviceBindingTransformFn, destinationName, useCache }: DestinationFetchOptions & DestinationForServiceBindingOptions): Promise<Destination | null>;
