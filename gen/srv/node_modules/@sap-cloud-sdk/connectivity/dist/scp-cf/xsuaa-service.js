"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserToken = exports.getClientCredentialsToken = void 0;
const xssec = __importStar(require("@sap/xssec"));
const internal_1 = require("@sap-cloud-sdk/resilience/internal");
const resilience_1 = require("@sap-cloud-sdk/resilience");
const environment_accessor_1 = require("./environment-accessor");
const tenant_1 = require("./tenant");
const subdomain_replacer_1 = require("./subdomain-replacer");
const jwt_1 = require("./jwt");
/**
 * Make a client credentials request against the XSUAA service.
 * @param service - Service as it is defined in the environment variable.
 * @param userJwt - User JWT.
 * @returns Client credentials token.
 */
async function getClientCredentialsToken(service, userJwt) {
    const jwt = userJwt ? (0, jwt_1.decodeJwt)(userJwt) : {};
    const fnArgument = {
        subdomain: (0, subdomain_replacer_1.getIssuerSubdomain)(jwt) || null,
        zoneId: (0, tenant_1.tenantId)(jwt) || null,
        serviceCredentials: (0, environment_accessor_1.resolveServiceBinding)(service).credentials
    };
    const xssecPromise = function (arg) {
        return new Promise((resolve, reject) => {
            xssec.requests.requestClientCredentialsToken(arg.subdomain, arg.serviceCredentials, null, arg.zoneId, (err, token, tokenResponse) => err ? reject(err) : resolve(tokenResponse));
        });
    };
    return (0, internal_1.executeWithMiddleware)((0, resilience_1.resilience)(), {
        fn: xssecPromise,
        fnArgument,
        context: {
            uri: fnArgument.serviceCredentials.url,
            tenantId: fnArgument.zoneId ?? fnArgument.serviceCredentials.tenantid
        }
    }).catch(err => {
        throw new Error(`Could not fetch client credentials token for service of type ${(0, environment_accessor_1.resolveServiceBinding)(service).label}: ${err.message}`);
    });
}
exports.getClientCredentialsToken = getClientCredentialsToken;
/**
 * Make a user token request against the XSUAA service.
 * @param service - Service as it is defined in the environment variable.
 * @param userJwt - User JWT.
 * @returns User token.
 */
function getUserToken(service, userJwt) {
    const jwt = (0, jwt_1.decodeJwt)(userJwt);
    const fnArgument = {
        subdomain: (0, subdomain_replacer_1.getIssuerSubdomain)(jwt) || null,
        zoneId: (0, tenant_1.tenantId)(jwt) || null,
        serviceCredentials: service.credentials,
        userJwt
    };
    const xssecPromise = function (arg) {
        return new Promise((resolve, reject) => xssec.requests.requestUserToken(arg.userJwt, arg.serviceCredentials, null, null, arg.subdomain, arg.zoneId, (err, token) => (err ? reject(err) : resolve(token))));
    };
    return (0, internal_1.executeWithMiddleware)((0, resilience_1.resilience)(), {
        fn: xssecPromise,
        fnArgument,
        context: {
            uri: service.credentials.url,
            tenantId: fnArgument.zoneId ?? service.credentials.tenantid
        }
    }).catch(err => {
        throw new Error(`Could not fetch JWT bearer token for service of type ${service.label}: ${err.message}`);
    });
}
exports.getUserToken = getUserToken;
//# sourceMappingURL=xsuaa-service.js.map