"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isIdenticalTenant = exports.getTenantIdWithFallback = exports.tenantId = exports.tenantName = exports.mappingTenantFields = void 0;
const jwt_1 = require("./jwt");
const subdomain_replacer_1 = require("./subdomain-replacer");
/**
 * Mapping between key name in the tenant and key name in decoded JWT.
 * @internal
 */
exports.mappingTenantFields = {
    id: { keyInJwt: 'zid', extractorFunction: tenantId },
    name: { keyInJwt: 'zdn', extractorFunction: tenantName }
};
/**
 * Get the tenant name of a decoded JWT.
 * @param jwtPayload - Token payload to read the tenant name from.
 * @returns The tenant name, if available.
 * @internal
 */
function tenantName(jwtPayload) {
    const extAttr = (0, jwt_1.readPropertyWithWarn)(jwtPayload, 'ext_attr');
    if (extAttr) {
        return (0, jwt_1.readPropertyWithWarn)(extAttr, 'zdn');
    }
}
exports.tenantName = tenantName;
/**
 * Get the tenant id of a decoded JWT, based on its `zid` property.
 * @param jwtPayload - Token payload to read the tenant id from.
 * @returns The tenant id, if available.
 * @internal
 */
function tenantId(jwtPayload) {
    return (0, jwt_1.readPropertyWithWarn)(jwtPayload, exports.mappingTenantFields.id.keyInJwt);
}
exports.tenantId = tenantId;
/**
 * Get the tenant id of a decoded JWT, based on its `zid` property or, if not available, the `iss` subdomain.
 * @param token - Token to read the tenant id from.
 * @returns The tenant id, if available.
 * @internal
 */
function getTenantIdWithFallback(token) {
    const decodedJwt = token ? (0, jwt_1.decodeJwt)(token) : {};
    return tenantId(decodedJwt) || (0, subdomain_replacer_1.getIssuerSubdomain)(decodedJwt) || undefined;
}
exports.getTenantIdWithFallback = getTenantIdWithFallback;
/**
 * Compare two decoded JWTs based on their `tenantId`s.
 * @param userTokenPayload - User JWT payload.
 * @param providerTokenPayload - Provider JWT payload.
 * @returns Whether the tenant is identical.
 * @internal
 */
function isIdenticalTenant(userTokenPayload, providerTokenPayload) {
    return ((0, jwt_1.readPropertyWithWarn)(userTokenPayload, exports.mappingTenantFields.id.keyInJwt) ===
        (0, jwt_1.readPropertyWithWarn)(providerTokenPayload, exports.mappingTenantFields.id.keyInJwt));
}
exports.isIdenticalTenant = isIdenticalTenant;
//# sourceMappingURL=tenant.js.map