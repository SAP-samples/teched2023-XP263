"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isErrorWithCause = exports.ErrorWithCause = void 0;
const string_formatter_1 = require("./string-formatter");
/**
 * Represents an error that was caused by another error.
 */
class ErrorWithCause extends Error {
    /**
     * Create an instance of ErrorWithCause.
     * @param message - Error message.
     * @param cause - Original error, causing this error.
     */
    constructor(message, cause) {
        // There is an issue with the prototype chain when extending from Error: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget
        super(message); // 'Error' breaks prototype chain here
        this.cause = cause;
        Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
        this.name = 'ErrorWithCause';
        this.addStack(cause);
    }
    isAxiosError(err) {
        return err['isAxiosError'] === true;
    }
    addStack(cause) {
        // Axios removed the stack property in version 0.27 which gave no useful information anyway. This adds the http cause.
        if (this.isAxiosError(cause)) {
            const response = cause.response?.data ? ` - ${cause.response?.data}` : '';
            this.stack = `${this.stack}${string_formatter_1.unixEOL}Caused by:${string_formatter_1.unixEOL}HTTP Response: ${cause.message}${response}`;
        }
        else if (this.stack && cause?.stack) {
            // Stack is a non-standard property according to https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
            this.stack = `${this.stack}${string_formatter_1.unixEOL}Caused by:${string_formatter_1.unixEOL}${cause.stack}`;
        }
    }
    /**
     * Root cause of the error.
     * If there are multiple errors caused one by another, the root cause is the first error that occurred.
     * In case there is no root cause.
     * @returns The root cause.
     */
    get rootCause() {
        return isErrorWithCause(this.cause) ? this.cause.rootCause : this.cause;
    }
}
exports.ErrorWithCause = ErrorWithCause;
/**
 * Type guard to check whether an error is of type ErrorWithCause.
 * @param err - An error.
 * @returns Whether the given error is of type ErrorWithCause.
 */
function isErrorWithCause(err) {
    return err?.name === 'ErrorWithCause';
}
exports.isErrorWithCause = isErrorWithCause;
//# sourceMappingURL=error-with-cause.js.map